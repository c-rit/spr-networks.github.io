"use strict";(self.webpackChunkspr_docs=self.webpackChunkspr_docs||[]).push([[4348],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=l(n),g=a,f=u["".concat(s,".").concat(g)]||u[g]||d[g]||o;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=g;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[u]="string"==typeof e?e:a,i[1]=p;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},9907:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={},i="Packet Logs",p={unversionedId:"services/packet_logs",id:"services/packet_logs",title:"Packet Logs",description:"This service receives packets over NFLog netlink messages.",source:"@site/docs/services/packet_logs.md",sourceDirName:"services",slug:"/services/packet_logs",permalink:"/pages/docs/services/packet_logs",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Multicast UDP Proxy",permalink:"/pages/docs/services/multicast_proxy"},next:{title:"PPP",permalink:"/pages/docs/services/ppp"}},s={},l=[{value:"The Groups",id:"the-groups",level:2},{value:"Group 0",id:"group-0",level:3},{value:"wan:in",id:"wanin",level:4},{value:"lan:in",id:"lanin",level:4},{value:"wan:out",id:"wanout",level:4},{value:"lan:out",id:"lanout",level:4},{value:"Group 1 - Dropped packets",id:"group-1---dropped-packets",level:3},{value:"drop:private",id:"dropprivate",level:4},{value:"drop:forward",id:"dropforward",level:4},{value:"drop:input",id:"dropinput",level:4},{value:"drop:mac",id:"dropmac",level:4},{value:"Inspecting packets",id:"inspecting-packets",level:2},{value:"Script to inspect traffic",id:"script-to-inspect-traffic",level:3}],c={toc:l};function u(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"packet-logs"},"Packet Logs"),(0,a.kt)("p",null,"This service receives packets over NFLog netlink messages."),(0,a.kt)("p",null,"The packet info is sent to the ",(0,a.kt)("a",{parentName:"p",href:"/pages/docs/services/sprbus"},"sprbus")," where clients subscribing to the ",(0,a.kt)("em",{parentName:"p"},"nft"),"-prefix gets notified. It's easier to talk to sprbus for packet inspection but also ",(0,a.kt)("a",{parentName:"p",href:"/pages/docs/services/packet_logs#inspecting-packets"},"available by packet_logs"),"."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Example"),": The ",(0,a.kt)("a",{parentName:"p",href:"/pages/docs/services/db"},"db service")," can enable storage of logs by adding the topic to ",(0,a.kt)("inlineCode",{parentName:"p"},"configs/db/config.json")," under the ",(0,a.kt)("em",{parentName:"p"},"SaveEvents")," key."),(0,a.kt)("p",null,"See also: ",(0,a.kt)("a",{parentName:"p",href:"/pages/docs/services/sprbus"},"sprbus")),(0,a.kt)("h2",{id:"the-groups"},"The Groups"),(0,a.kt)("h3",{id:"group-0"},"Group 0"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'chain INPUT  { ...\n$(if [ "$WANIF" ]; then echo "iifname $WANIF log prefix \\"wan:in \\" group 0"; fi)\n$(if [ "$WANIF" ]; then echo "iifname ne $WANIF log prefix \\"lan:in \\" group 0"; else echo "log prefix \\"lan:in \\" group 0"; fi)\n\n}\n\nchain FORWARD { ...\n\n$(if [ "$WANIF" ]; then echo "oifname $WANIF log prefix \\"wan:out \\" group 0"; fi)\n$(if [ "$WANIF" ]; then echo "oifname ne $WANIF log prefix \\"lan:out \\" group 0"; else echo "log prefix \\"lan:out \\" group 0"; fi)\n')),(0,a.kt)("p",null,"}"),(0,a.kt)("h4",{id:"wanin"},"wan:in"),(0,a.kt)("p",null,"Input from the upstream interface ($WANIF)"),(0,a.kt)("h4",{id:"lanin"},"lan:in"),(0,a.kt)("p",null,"Input from all other devices (wireguard, wireless clients, wired devices)"),(0,a.kt)("h4",{id:"wanout"},"wan:out"),(0,a.kt)("p",null,"Packets forwarded upstream to the internet over the $WANIF interface"),(0,a.kt)("h4",{id:"lanout"},"lan:out"),(0,a.kt)("p",null,"Packets forwaded to any other non-upstream interface"),(0,a.kt)("h3",{id:""}),(0,a.kt)("h3",{id:"group-1---dropped-packets"},"Group 1 - Dropped packets"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'log prefix "drop:private " group 1\ncounter log prefix "drop:forward " group 1\ncounter log prefix "drop:input " group 1\nlog prefix "drop:mac " group 1\n')),(0,a.kt)("h4",{id:"dropprivate"},"drop:private"),(0,a.kt)("p",null,"This prefix marks packets that were dropped because they were headed upstream\nto a private network address, but blocked from doing so because they were not\nin a permitted group"),(0,a.kt)("h4",{id:"dropforward"},"drop:forward"),(0,a.kt)("p",null,"Packets that were dropped during forward"),(0,a.kt)("h4",{id:"dropinput"},"drop:input"),(0,a.kt)("p",null,"Input packets into SPR that were dropped"),(0,a.kt)("h4",{id:"dropmac"},"drop:mac"),(0,a.kt)("p",null,"Packets that were dropped because of an strict MAC filtering in\nthe INPUT chain in the FORWARD chain."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/spr-networks/super/tree/main/packet_logs"}," \u21e8 View the code")),(0,a.kt)("h2",{id:"inspecting-packets"},"Inspecting packets"),(0,a.kt)("p",null,"Retrieve JSON packet logs on SPR with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker exec -it superpacket_logs /stream-json-logs > log.json\n")),(0,a.kt)("p",null,"will log packets for 20 seconds, can specify with ",(0,a.kt)("inlineCode",{parentName:"p"},"-timeout")," flag."),(0,a.kt)("p",null,"Packets can be inspected with ",(0,a.kt)("inlineCode",{parentName:"p"},"jq"),", see following section for fields. Raw data is available and base64 encoded."),(0,a.kt)("h3",{id:"script-to-inspect-traffic"},"Script to inspect traffic"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"packetlogs",src:n(2199).Z,width:"1200",height:"600"})),(0,a.kt)("p",null,"Example script with ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/charmbracelet/gum"},"gum")," - a tool for glamorous shell scripts."),(0,a.kt)("p",null,"Install dependencies:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"apt install jq\ngo install github.com/charmbracelet/gum@latest\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/sh\n# packet_logs json stream build if not running on spr:\n# cd packet_logs/stream-json-logs && go build -o stream\n# ./stream > log.json\nF="$PWD/log.json"\nF_CSV="${F}.csv"\nBIN_STREAM="docker exec -it superpacket_logs /stream-json-logs"\n\nlog_stream() {\n    gum spin -s moon --title "Logging traffic... 20s" -- sh -c "$BIN_STREAM > $F"\n}\n\ntable() {\nF_UDP=\'[.Timestamp,"UDP",.Prefix, ([.IP.SrcIP,.UDP.SrcPort|tostring]|join(":")), ([.IP.DstIP,.UDP.DstPort|tostring]|join(":"))]\'\nF_TCP=\'[.Timestamp,"TCP",.Prefix, ([.IP.SrcIP,.TCP.SrcPort|tostring]|join(":")), ([.IP.DstIP,.TCP.DstPort|tostring]|join(":"))]\'\n\ncat "$F" \\\n    | jq -r -c "if .UDP!=null then $F_UDP elif .TCP!=null then $F_TCP else empty end | @csv" \\\n    | sed \'s/"//g\' > "$F_CSV"\n\nIS_TABLE=0\n\nif [ $IS_TABLE -eq 1 ]; then\n    SEL_ROW=$(gum table -c "ts, proto, prefix, src, dst" -w 30,8,10,20,20 --height 20 -f "$F_CSV")\nelse\n    SEL_ROW=$(cat "$F_CSV" \\\n        | sed \'s/,/ /g\' \\\n        | gum filter --no-fuzzy --indicator.foreground="99" --match.foreground="99" --height 20)\nfi\n\nSEL_TS=$(echo $SEL_ROW|sed \'s/,/\\t/g\'|awk \'{print $1}\')\n\nif [ -z "$SEL_TS" ]; then\n    exit\nfi\n\nSEL_JSON=$(cat "$F" | jq "select(.Timestamp == \\"$SEL_TS\\")")\n\necho "$SEL_JSON" | gum pager\n}\n\ngum style --foreground 99 --border double --border-foreground 99 --padding "0 4" --margin 1 "SPR packet logs cli"\ngum input --placeholder="Press ENTER to start"\n\nif [ ! -f "$F" ]; then\n    log_stream\nfi\n\nwhile true; do table; done\n')),(0,a.kt)("p",null,"save the script in packetlogs.sh and run it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"./packetlogs.sh\n")))}u.isMDXComponent=!0},2199:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/packet-logs-3b9ad3129504aea6baa792bde0fa93e7.gif"}}]);