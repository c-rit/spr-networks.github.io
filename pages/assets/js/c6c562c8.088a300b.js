"use strict";(self.webpackChunkspr_docs=self.webpackChunkspr_docs||[]).push([[6536],{1980:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var i=s(85893),n=s(11151);const r={},o="MITMProxy with PFW",c={id:"guides_plus/mitmproxy",title:"MITMProxy with PFW",description:"MITMProxy is a utility for intercepting and inspecting web traffic. In this guide, we'll cover",source:"@site/docs/guides_plus/mitmproxy.md",sourceDirName:"guides_plus",slug:"/guides_plus/mitmproxy",permalink:"/pages/docs/guides_plus/mitmproxy",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"WiFi Mesh Support",permalink:"/pages/docs/guides_plus/mesh"},next:{title:"PFW Programmable Firewall",permalink:"/pages/docs/guides_plus/pfw"}},a={},l=[{value:"Prepare the plugin",id:"prepare-the-plugin",level:3},{value:"Configure SPR",id:"configure-spr",level:3},{value:"Select targets to intercept",id:"select-targets-to-intercept",level:3},{value:"Using mitmproxy",id:"using-mitmproxy",level:3},{value:"Coming soon",id:"coming-soon",level:3},{value:"Leveraging Transparent Sockets",id:"leveraging-transparent-sockets",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,n.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"mitmproxy-with-pfw",children:"MITMProxy with PFW"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"https://mitmproxy.org/",children:"MITMProxy"})," is a utility for intercepting and inspecting web traffic. In this guide, we'll cover\nhow to configure it in a container and use some of the advanced PLUS features to selectively redirect traffic through the container."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://github.com/spr-networks/spr-mitmproxy",children:"This plugin is available on github."})}),"\n",(0,i.jsx)(t.h3,{id:"prepare-the-plugin",children:"Prepare the plugin"}),"\n",(0,i.jsx)(t.p,{children:"In a future release, plugin installation will be streamlined. For now configuration requires a couple of steps,\nand we'll walk through those in this guide."}),"\n",(0,i.jsx)(t.p,{children:"First, get the spr-mitmproxy plugin."}),"\n",(0,i.jsxs)(t.p,{children:["from the SPR directory, typically ",(0,i.jsx)(t.code,{children:"/home/spr/super"})]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:'sudo bash\ncd plugins\ngit clone https://github.com/spr-networks/spr-mitmproxy\necho [\\"plugins/spr-mitmproxy/docker-compose.yml\\"] > ../configs/base/custom_compose_paths.json\ncd spr-mitmproxy\ndocker-compose build\n'})}),"\n",(0,i.jsx)(t.h3,{id:"configure-spr",children:"Configure SPR"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Navigate to the SPR UI. Add a new Plugin under the Plugins page"}),"\n"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Set name to ",(0,i.jsx)(t.code,{children:"mitmproxy"})]}),"\n",(0,i.jsxs)(t.li,{children:["Set ComposeFilePath to ",(0,i.jsx)(t.code,{children:"plugins/spr-mitmproxy/docker-compose.yml"})]}),"\n"]}),"\n",(0,i.jsx)("img",{width:"75%",src:"https://github.com/spr-networks/spr-mitmproxy/assets/37549748/dcc0f1ea-724a-4ed0-856a-56444ea2569f"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Make sure its been added to ",(0,i.jsx)(t.code,{children:"configs/base/custom_compose_paths.json"})," as described in the previous section"]}),"\n",(0,i.jsxs)(t.li,{children:["Enable it by toggling the slider. This should auto-start the plugin. On the command link you can look for it with ",(0,i.jsx)(t.code,{children:"docker ps"})]}),"\n"]}),"\n",(0,i.jsxs)(t.ol,{start:"2",children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Go to the Firewall page and expand the Custom Interface Rules. Add a new entry for ",(0,i.jsx)(t.code,{children:"mitmweb0"})," to the custom interface rules. You can verify your container's network address in the Container tab ->\nUnder ",(0,i.jsx)(t.code,{children:"Firewall-> Custom Interface Access"})," although it should automatically populate. Set the last IP octet to '.2' which will be the mitmproxy container address.\nAdd the new rule, make sure mitmproxy has ",(0,i.jsx)(t.code,{children:"wan"})," and ",(0,i.jsx)(t.code,{children:"dns"})," at least to access the internet. The ",(0,i.jsx)(t.code,{children:"lan_upstream"})," tag can also be added if mitmproxy should access private lan addresses. Also add it to a ",(0,i.jsx)(t.code,{children:"mitmweb"})," group, and any other device in this group will be able to access the mitmweb interface on ",(0,i.jsx)(t.code,{children:"172.x.y.2:8081"}),"\n",(0,i.jsx)(t.img,{alt:"plus-mitmproxy-iface-access",src:s(61178).Z+"",width:"2664",height:"1344"})]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Also add your device to the ",(0,i.jsx)(t.code,{children:"mitmweb"})," group under the Devices page by editing your device. This allows the device to access the mitmweb interface."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:s(43390).Z+"",width:"2092",height:"698"})}),"\n",(0,i.jsxs)(t.p,{children:["Verify that the mitmweb page is reachable from the device at ",(0,i.jsx)(t.a,{href:"http://172.x.y.2:8081",children:"http://172.x.y.2:8081"})]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:s(70888).Z+"",width:"2070",height:"854"})}),"\n",(0,i.jsx)(t.h3,{id:"select-targets-to-intercept",children:"Select targets to intercept"}),"\n",(0,i.jsxs)(t.p,{children:["Now that the plugin has been configured, we can use ",(0,i.jsx)(t.code,{children:"PFW"})," to select targets to intercept."]}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Navigate to the PFW viewing\n",(0,i.jsx)(t.img,{src:s(43714).Z+"",width:"2676",height:"1238"})]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Select Always as a trigger\n",(0,i.jsx)(t.img,{src:s(92044).Z+"",width:"2654",height:"1288"})]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Pick a Site Forward action. We'll pick the one on the left which forwards all ports but the one on the right works also\n",(0,i.jsx)(t.img,{src:s(75197).Z+"",width:"2636",height:"1274"})]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Complete the rule, filling out the container IP as the destination.\nIn this example, traffic destined for ",(0,i.jsx)(t.code,{children:"www.asdf.com"})," will be redirected to ",(0,i.jsx)(t.code,{children:"172.19.0.2"})," which is the mitmproxy container.\n",(0,i.jsx)(t.img,{src:s(15285).Z+"",width:"1094",height:"1230"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"using-mitmproxy",children:"Using mitmproxy"}),"\n",(0,i.jsxs)(t.p,{children:["When the target device visits ",(0,i.jsx)(t.code,{children:"www.asdf.com"})," it should populate on the mitmproxy web interface.\n",(0,i.jsx)(t.img,{src:"https://github.com/spr-networks/spr-mitmproxy/assets/37549748/a70a9f7e-91b9-4798-926b-2cb625f71e78",alt:""})]}),"\n",(0,i.jsx)(t.h3,{id:"coming-soon",children:"Coming soon"}),"\n",(0,i.jsxs)(t.p,{children:["Now that we've verified it's working correctly, lets use ",(0,i.jsx)(t.code,{children:"mitmproxy"})," for a realistic example."]}),"\n",(0,i.jsx)(t.h2,{id:"leveraging-transparent-sockets",children:"Leveraging Transparent Sockets"}),"\n",(0,i.jsxs)(t.p,{children:["Behind the scenes, ",(0,i.jsx)(t.code,{children:"mitmproxy"})," is using transparent sockets with DNAT. Inside the container network,\nwe establish dnat rules to ",(0,i.jsx)(t.code,{children:"mitmproxy"})," from incoming ports ",(0,i.jsx)(t.code,{children:"80"}),", ",(0,i.jsx)(t.code,{children:"443"}),". YOu can use PFW's port forwarding feature to redirect to these ports if the target is connecting on a different port."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"#!/bin/bash\n\nnft -f - << EOF\ntable inet nat {\n        chain prerouting {\n                type nat hook prerouting priority filter; policy accept;\n                tcp dport { 80, 443 } dnat ip to 127.0.0.1:9999\n        }\n}\nEOF\n\nmitmweb -p 9999 -m transparent --web-host 0.0.0.0\n"})})]})}function h(e={}){const{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},15285:(e,t,s)=>{s.d(t,{Z:()=>i});const i=s.p+"assets/images/pfw-mitmproxy-site-foward-action-filled-9e4871e2094f0a991bea915aaccbdc15.png"},75197:(e,t,s)=>{s.d(t,{Z:()=>i});const i=s.p+"assets/images/pfw-mitproxy-site-forward-action-67a74748772187574e63c5c9fc6679c6.png"},92044:(e,t,s)=>{s.d(t,{Z:()=>i});const i=s.p+"assets/images/pfw-mitproxy-trigger-always-53961bbf0305b1c055699ca651e92e26.png"},43390:(e,t,s)=>{s.d(t,{Z:()=>i});const i=s.p+"assets/images/plus-mitmproxy-device-edit-df26459d2bce5daad3aa6214fc78ed2f.png"},61178:(e,t,s)=>{s.d(t,{Z:()=>i});const i=s.p+"assets/images/plus-mitmproxy-iface-access-cb2343e3075457a16b3324e54f8d5c29.png"},70888:(e,t,s)=>{s.d(t,{Z:()=>i});const i=s.p+"assets/images/plus-mitmproxy-web-first-f511ed93b7c13c017370fcbd11e7edcc.png"},43714:(e,t,s)=>{s.d(t,{Z:()=>i});const i=s.p+"assets/images/plus-mitproxy-pfw-645cc7a6d847085d9c9dfa1b20b25a95.png"},11151:(e,t,s)=>{s.d(t,{Z:()=>c,a:()=>o});var i=s(67294);const n={},r=i.createContext(n);function o(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);