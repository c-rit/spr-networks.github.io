"use strict";(self.webpackChunkspr_docs=self.webpackChunkspr_docs||[]).push([[6343],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),h=a,m=d["".concat(l,".").concat(h)]||d[h]||c[h]||i;return n?r.createElement(m,o(o({ref:t},u),{},{components:n})):r.createElement(m,o({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5296:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return c}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],s={sidebar_label:"Raspberry Pi 4 Model B Setup Guide"},l="Raspberry Pi 4 Model B Setup Guide",p={unversionedId:"pi4b",id:"pi4b",title:"Raspberry Pi 4 Model B Setup Guide",description:"Configuration",source:"@site/docs/pi4b.md",sourceDirName:".",slug:"/pi4b",permalink:"/pages/docs/pi4b",tags:[],version:"current",frontMatter:{sidebar_label:"Raspberry Pi 4 Model B Setup Guide"},sidebar:"tutorialSidebar",previous:{title:"Wireguard",permalink:"/pages/docs/services/wireguard"},next:{title:"Roadmap",permalink:"/pages/docs/roadmap/"}},u={},c=[{value:"Configuration",id:"configuration",level:2},{value:"Base System Setup",id:"base-system-setup",level:3},{value:"Configuring the project",id:"configuring-the-project",level:3},{value:"Running the project using prebuilt containers",id:"running-the-project-using-prebuilt-containers",level:3},{value:"Building the project",id:"building-the-project",level:3},{value:"Additional Notes",id:"additional-notes",level:3},{value:"Using a different wireless dongle",id:"using-a-different-wireless-dongle",level:3}],d={toc:c};function h(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"raspberry-pi-4-model-b-setup-guide"},"Raspberry Pi 4 Model B Setup Guide"),(0,i.kt)("h2",{id:"configuration"},"Configuration"),(0,i.kt)("p",null,"The current setup assumes you'll be using a Raspberry Pi model 4b with an mt76 based wireless dongle (wlan1).\nOptionally an additional usb ethernet dongle (eth1) can be connected to a switch for additional wired devices.\nThe built-in ethernet port of the Raspberry Pi (eth0) is connected to upstream/WAN/internet"),(0,i.kt)("p",null,"Hardware requirements:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"At least a 16GB SD card is required, and a USB flash drive works best for development."),(0,i.kt)("li",{parentName:"ul"},"A WiFi Dongle for better performance and WPA3 support. Both ",(0,i.kt)("a",{parentName:"li",href:"https://www.alfa.com.tw/products/awus036acm"},"Alfa's AWUS036ACM")," and ",(0,i.kt)("a",{parentName:"li",href:"https://www.netgear.com/home/wifi/adapters/a6210/"},"Netgear's A620")," have been tested to be good and both use the mt76x2u driver)"),(0,i.kt)("li",{parentName:"ul"},"(Optional) A USB WiFi Dongle for additional LAN devices since the built-in ethernet card (eth0) will be used for the WAN. The ",(0,i.kt)("a",{parentName:"li",href:"https://www.tp-link.com/us/home-networking/usb-converter/ue300/"},"UE 300")," has been tested to run near line speed.")),(0,i.kt)("h3",{id:"base-system-setup"},"Base System Setup"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Set up the pi with ubuntu server 64-bit ",(0,i.kt)("a",{parentName:"p",href:"https://ubuntu.com/download/raspberry-pi/thank-you?version=21.10&architecture=server-arm64+raspi"},"Click here")," to download the IMG file from Ubuntu"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# On a mac, write the image to the external disk (rdisk2)\n$ xzcat ubuntu-21.10-preinstalled-server-arm64+raspi.img.xz | dd of=/dev/rdisk2 bs=$[1024*1024]\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Set up the SPR repository"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# On the booted pi (see and run base/setup.s\ngit clone https://github.com/spr-networks/super\ncd super\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Prepare the Ubuntu Install ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/spr-networks/super/blob/main/base/setup.sh"},"base/setup.sh")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"#if using a flash drive\nsudo base/setup.sh\n#or if using an sdcard the following script reduces disk usage too\n# base/setup-sdcard.sh #this setup will reduce writes from log files\nreboot\n")))),(0,i.kt)("h3",{id:"configuring-the-project"},"Configuring the project"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Inside the super directory, copy base/template_configs to configs/"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd super\ncp -R base/template_configs configs\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Modify ",(0,i.kt)("inlineCode",{parentName:"p"},"configs/base/config.sh")," to set an SSID_NAME or change other options.\nEnsure that ",(0,i.kt)("inlineCode",{parentName:"p"},"WANIF")," matches the name of the outbound interface if not using the builtin ethernet port.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Set an api username and password for the web UI. The UI will be reachable on port 80 from connected devices."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'mkdir -p state/api/\necho {\\"admin\\" : \\"your password goes here\\"} > state/api/auth_users\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"(Optional) Open up SSH to Uplink"),(0,i.kt)("p",{parentName:"li"},"For testing, it is likely that the API/SSH should also be reached from the WAN interface. Modify ",(0,i.kt)("inlineCode",{parentName:"p"},"configs/base/nft_rules.sh"),"\nto remove port 80 and 22. The base container must be restarted (if already running) for the change to take effect."),(0,i.kt)("p",{parentName:"li"},"The firewall rule to change looks like:\n",(0,i.kt)("inlineCode",{parentName:"p"},"iifname $WANIF tcp dport {22, 5201, 80} counter jump DROPLOGINP")),(0,i.kt)("p",{parentName:"li"},"To remove 22/80 from being dropped:\n",(0,i.kt)("inlineCode",{parentName:"p"},"iifname $WANIF tcp dport {5201} counter jump DROPLOGINP")))),(0,i.kt)("ol",{start:5},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"(Optional) Configure WiFi PSKs on command line"),(0,i.kt)("p",{parentName:"li"},'It is possible to manually configure zones and stations ahead of time, without using the web interface.\nFor WPA3, use "sae" type and for WPA2 use "wpa2". See configs/wifi/psks.json')),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"(Optional) Assign devices to Zones"),(0,i.kt)("p",{parentName:"li"},"Lastly,  manually add those devices to zones in configs/zones/zones.json\nThe default zones are:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"# No access to anything\n- isolated\n# Allows DNS query access\n- dns\n# Allows internet/WAN forwarding\n- wan\n# Allows full LAN access\n")))),(0,i.kt)("h3",{id:"running-the-project-using-prebuilt-containers"},"Running the project using prebuilt containers"),(0,i.kt)("p",null,"Testing containers are built and published to GitHub's Container Registry,\nand can be run without building on the device. If you would instead like to build everything\nfrom source, proceed to the ",(0,i.kt)("a",{parentName:"p",href:"#building-the-project"},"next section"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"./configs/scripts/gen_coredhcp_yaml.sh > configs/dhcp/coredhcp.yml\n./configs/scripts/gen_hostapd.sh > configs/wifi/hostapd.conf\n./configs/scripts/gen_watchdog.sh  > configs/watchdog/watchdog.conf\n\n./run_prebuilt.sh\n")),(0,i.kt)("p",null,"To see logs:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"docker-compose logs -f\n")),(0,i.kt)("h3",{id:"building-the-project"},"Building the project"),(0,i.kt)("p",null,"All source code can be built on the pi. Because the system uses ",(0,i.kt)("inlineCode",{parentName:"p"},"nftables")," exclusively,\nand docker is made to work with ",(0,i.kt)("inlineCode",{parentName:"p"},"iptables"),", you will need to set up minimal forwarding\nrules for docker to work on the first install."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"#fix nftables\nsudo ./base/docker_nftables_setup.sh  \n")),(0,i.kt)("p",null,"And build."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"sudo ./build_docker_compose.sh\n")),(0,i.kt)("p",null,"If something went wrong with with a cached stage, it is possible to specify ",(0,i.kt)("inlineCode",{parentName:"p"},"--no-cache"),".\nFor example: ",(0,i.kt)("inlineCode",{parentName:"p"},"sudo ./build_docker_comopse.sh --no-cache")),(0,i.kt)("p",null,"A specific service can also be built by passing it as an argument (",(0,i.kt)("inlineCode",{parentName:"p"},"./build_docker_compose.sh api"),")"),(0,i.kt)("p",null,"To run the local build:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./run_docker_compose.sh\n")),(0,i.kt)("h3",{id:"additional-notes"},"Additional Notes"),(0,i.kt)("p",null,"Check dns-Corefile to tweak DNS server configuration as well as the hostapd settings in ",(0,i.kt)("inlineCode",{parentName:"p"},"configs/gen_hostapd.sh")),(0,i.kt)("p",null,"It is possible to use SPR's DNS server for the host system's DNS requests too, by updating the resolv.conf file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'sudo echo -e "nameserver 127.0.0.1\\nnameserver 1.1.1.1" > /etc/resolv.conf\n')),(0,i.kt)("h3",{id:"using-a-different-wireless-dongle"},"Using a different wireless dongle"),(0,i.kt)("p",null,"For using the built-in wireless or a different dongle, the hostapd configuration may need to be modified in ",(0,i.kt)("inlineCode",{parentName:"p"},"configs/scripts/gen_hostapd.sh"),". Note that if the built-in wireless is to be used, WPA3 is not currently available without additional broadcom firmware patches. The next Raspberry Pi OS releases should include these by default."))}h.isMDXComponent=!0}}]);