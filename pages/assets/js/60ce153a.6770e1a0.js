"use strict";(self.webpackChunkspr_docs=self.webpackChunkspr_docs||[]).push([[8331],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),o=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},u=function(e){var t=o(e.components);return r.createElement(i.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=o(n),d=a,k=c["".concat(i,".").concat(d)]||c[d]||m[d]||s;return n?r.createElement(k,p(p({ref:t},u),{},{components:n})):r.createElement(k,p({ref:t},u))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,p=new Array(s);p[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[c]="string"==typeof e?e:a,p[1]=l;for(var o=2;o<s;o++)p[o]=n[o];return r.createElement.apply(null,p)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7308:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>p,default:()=>c,frontMatter:()=>s,metadata:()=>l,toc:()=>o});var r=n(7462),a=(n(7294),n(3905));const s={},p="SPRbus",l={unversionedId:"services/sprbus",id:"services/sprbus",title:"SPRbus",description:"version",source:"@site/docs/services/sprbus.md",sourceDirName:"services",slug:"/services/sprbus",permalink:"/pages/docs/services/sprbus",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"PPP",permalink:"/pages/docs/services/ppp"},next:{title:"Superd",permalink:"/pages/docs/services/superd"}},i={},o=[{value:"Usage",id:"usage",level:2},{value:"Available events",id:"available-events",level:2},{value:"Example Events",id:"example-events",level:2},{value:"Command line tools",id:"command-line-tools",level:2}],u={toc:o};function c(e){let{components:t,...s}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"sprbus"},"SPRbus"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://img.shields.io/github/v/tag/spr-networks/sprbus?sort=semver&label=version",alt:"version"}),"\n",(0,a.kt)("a",{parentName:"p",href:"https://goreportcard.com/report/github.com/spr-networks/sprbus"},(0,a.kt)("img",{parentName:"a",src:"https://goreportcard.com/badge/github.com/spr-networks/sprbus",alt:"Go Report Card"}))),(0,a.kt)("p",null,"SPRbus is the event bus used in SPR to send and subscribe to events."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/spr-networks/sprbus/tree/main"}," \u21e8 View the code")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/pages/docs/services/db"},"db")," is listening for events and store these in a database"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/pages/docs/services/packet_logs"},"packet logs")," send events when netfilter rules are triggered"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/pages/docs/apis/overview"},"api")," for notifications"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/pages/docs/apis/overview"},"api")," publish event for access log"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/pages/docs/services/dns"},"dns")," send events on domain lookup or block")),(0,a.kt)("h2",{id:"available-events"},"Available events"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"dns:block:event"),(0,a.kt)("li",{parentName:"ul"},"dns:override:event"),(0,a.kt)("li",{parentName:"ul"},"dns:serve:192.168.2.2"),(0,a.kt)("li",{parentName:"ul"},"log:api"),(0,a.kt)("li",{parentName:"ul"},"log:www:access"),(0,a.kt)("li",{parentName:"ul"},"nft:lan:in"),(0,a.kt)("li",{parentName:"ul"},"nft:lan:out"),(0,a.kt)("li",{parentName:"ul"},"nft:wan:in"),(0,a.kt)("li",{parentName:"ul"},"nft:wan:out"),(0,a.kt)("li",{parentName:"ul"},"nft:drop:private"),(0,a.kt)("li",{parentName:"ul"},"nft:drop:forward"),(0,a.kt)("li",{parentName:"ul"},"nft:drop:input"),(0,a.kt)("li",{parentName:"ul"},"nft:drop:mac"),(0,a.kt)("li",{parentName:"ul"},"www:auth:user:success")),(0,a.kt)("h2",{id:"example-events"},"Example Events"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"wifi:auth:success")," is published when a device connect"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"device:save")," is published when a device is updated")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/pages/api/0"},"View the API documentation for sprbus here")),(0,a.kt)("p",null,"By default ",(0,a.kt)("em",{parentName:"p"},"log:api"),", ",(0,a.kt)("em",{parentName:"p"},"dns:block:event"),", ",(0,a.kt)("em",{parentName:"p"},"dns:override:event"),", ",(0,a.kt)("em",{parentName:"p"},"dns:serve:")," events are stored in the database.\nThe log items can be viewed under ",(0,a.kt)("em",{parentName:"p"},"System -> Logs"),".\nIf you want to store more events you can add them in the web ui under ",(0,a.kt)("em",{parentName:"p"},"System -> System Info -> Database"),"."),(0,a.kt)("h2",{id:"command-line-tools"},"Command line tools"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"sprbus",src:n(502).Z,width:"1200",height:"750"})),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/spr-networks/sprbus/blob/main/cmd/main.go"},"cmd/main.go")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"cd cmd/; make\n./sprbus --help\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"remote")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},'export TOKEN="SPR-API-TOKEN"\n./sprbus --addr 192.168.2.1\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"local")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"./sprbus\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"example topics")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"#www and api logs\n./sprbus -t log\n# device and wifi events\n./sprbus -t device,wifi\n#network traffic\n./sprbus -t nft\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"network traffic in json, no timeout and pipe to jq")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"./sprbus -t nft -j --timeout 0 | jq .\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"publish test event")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},'./sprbus -t test:event -p \'{"msg": "testevent1234"}\'\n')),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"sprbus intro",src:n(1045).Z,width:"1200",height:"600"}),"\nexample showing how to publish events."),(0,a.kt)("h1",{id:"development"},"Development"),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/spr-networks/sprbus/blob/main/example/main.go"},"example/main.go")),(0,a.kt)("p",null,"using default sprbus:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-golang"},'//publish json string\nsprbus.PublishString("wifi:station:event", "{\\"json\\": \\"data\\"}")\n\n//publish object\nsprbus.Publish("www:auth:user:fail", map[string]string{"username": username})\n\n//subscribe\ngo sprbus.HandleEvent("wifi", func (topic string, json string) {\n    fmt.Println("wifi event", topic, json)\n})\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Custom unix socket server and client")),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/spr-networks/sprbus/blob/main/example/main.go"},"example/main.go")," for code to setup a custom unix socket server and client"))}c.isMDXComponent=!0},502:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/sprbus-cli-476cc4f905e635d16c3fdcc0041fc30a.gif"},1045:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/sprbus-publish-2e19f79fbd12c9a023895bb244710806.gif"}}]);