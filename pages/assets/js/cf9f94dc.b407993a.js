"use strict";(self.webpackChunkspr_docs=self.webpackChunkspr_docs||[]).push([[6638],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(t),d=r,g=u["".concat(s,".").concat(d)]||u[d]||m[d]||o;return t?a.createElement(g,l(l({ref:n},c),{},{components:t})):a.createElement(g,l({ref:n},c))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[u]="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},81723:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=t(87462),r=(t(67294),t(3905));const o={slug:"spr-nexmon",title:"Loading up nexmon on a RPI4 with SPR",authors:"ltsrad",tags:["Raspberry Pi","Python","Scapy","WiFi","Linux","Nexmon","Seemoo Labs"]},l="About",i={permalink:"/pages/blog/spr-nexmon",source:"@site/blog/2023-11-1-nexmon-spr.md",title:"Loading up nexmon on a RPI4 with SPR",description:"The built-in wifi radio on a Raspberry Pi 4 is kind of sad, as it does not support monitor mode.",date:"2023-11-01T00:00:00.000Z",formattedDate:"November 1, 2023",tags:[{label:"Raspberry Pi",permalink:"/pages/blog/tags/raspberry-pi"},{label:"Python",permalink:"/pages/blog/tags/python"},{label:"Scapy",permalink:"/pages/blog/tags/scapy"},{label:"WiFi",permalink:"/pages/blog/tags/wi-fi"},{label:"Linux",permalink:"/pages/blog/tags/linux"},{label:"Nexmon",permalink:"/pages/blog/tags/nexmon"},{label:"Seemoo Labs",permalink:"/pages/blog/tags/seemoo-labs"}],readingTime:4.675,hasTruncateMarker:!1,authors:[{name:"Alex Radocea",url:"https://twitter.com/defendtheworld",key:"ltsrad"}],frontMatter:{slug:"spr-nexmon",title:"Loading up nexmon on a RPI4 with SPR",authors:"ltsrad",tags:["Raspberry Pi","Python","Scapy","WiFi","Linux","Nexmon","Seemoo Labs"]},nextItem:{title:"Attack Surface Reduction Research (Part 1)",permalink:"/pages/blog/barely-ap-surfaces"}},s={authorsImageUrls:[void 0]},p=[{value:"First, we will copy the template plugin",id:"first-we-will-copy-the-template-plugin",level:2},{value:"Development",id:"development",level:2},{value:"Prebuilt binaries",id:"prebuilt-binaries",level:3},{value:"Docker preparations",id:"docker-preparations",level:3},{value:"Extending the SPR API",id:"extending-the-spr-api",level:3},{value:"Updating the startup script",id:"updating-the-startup-script",level:3},{value:"Loading",id:"loading",level:2},{value:"Testing",id:"testing",level:2},{value:"Running barely-ap",id:"running-barely-ap",level:2},{value:"Want to try it yourself on SPR?",id:"want-to-try-it-yourself-on-spr",level:2}],c={toc:p};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The built-in wifi radio on a Raspberry Pi 4 is kind of sad, as it does not support monitor mode.\nLuckily the hackers at Seemo Labs have fixed this."),(0,r.kt)("p",null,"In this post we'll describe how to load Seemoo's Nexmon onto a pi4 running a modern kernel, and package it into a SPR Plugin\nnamed  ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/spr-networks/spr-nexmon/tree/main"},"spr-nexmon"),". We'll demonstrate that packet capture and injection works."),(0,r.kt)("h2",{id:"first-we-will-copy-the-template-plugin"},"First, we will copy the template plugin"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell-session"},"$ cp -R super/api_sample_plugin/ spr-nexmon\n")),(0,r.kt)("h2",{id:"development"},"Development"),(0,r.kt)("h3",{id:"prebuilt-binaries"},"Prebuilt binaries"),(0,r.kt)("p",null,"We'll use some prebuilt binaries that include"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the nexmon firmware build for the broadcom wifi radio"),(0,r.kt)("li",{parentName:"ul"},"the 6.2 kernel build"),(0,r.kt)("li",{parentName:"ul"},"the nexutil binary")),(0,r.kt)("p",null,"These were built from the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/seemoo-lab/nexmon/compare/master...DrSchottky:nexmon:rpi-6.1.y"},"6.1/6.2 support pull-request")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell-session"},"$ cp -R ../nexmon/binaries spr-nexmon/binaries\n")),(0,r.kt)("h3",{id:"docker-preparations"},"Docker preparations"),(0,r.kt)("p",null,"We'll update the Dockerfile to include some useful tools and build the project."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-docker"},'FROM ubuntu:23.04 as builder\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt-get update\nRUN apt-get install -y --no-install-recommends nano ca-certificates git curl\nRUN mkdir /code\nWORKDIR /code\nARG TARGETARCH\nRUN curl -O https://dl.google.com/go/go1.20.linux-${TARGETARCH}.tar.gz\nRUN rm -rf /usr/local/go && tar -C /usr/local -xzf go1.20.linux-${TARGETARCH}.tar.gz\nENV PATH="/usr/local/go/bin:$PATH"\nCOPY code/ /code/\n\nARG USE_TMPFS=true\nRUN --mount=type=tmpfs,target=/tmpfs \\\n    [ "$USE_TMPFS" = "true" ] && ln -s /tmpfs /root/go; \\\n    go build -ldflags "-s -w" -o /nexmon_plugin /code/nexmon_plugin.go\n\n\nFROM ghcr.io/spr-networks/container_template:latest\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && apt-get install -y --no-install-recommends tcpdump kmod iw wireless-regdb && rm -rf /var/lib/apt/lists/*\nCOPY scripts /scripts/\nCOPY --from=builder /nexmon_plugin /\nCOPY binaries/ nexmon/\nENTRYPOINT ["/scripts/startup.sh"]\n')),(0,r.kt)("p",null,"We also want this container to use the host network and be privileged so it\ncan load kernel modules. And we'll also set it to restart automatically"),(0,r.kt)("p",null,"And heres the docker-compose.yml:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'version: \'3.4\'\n\nx-logging:\n  &default-logging\n  driver: journald\n\nx-labels:\n  &default-labels\n  org.supernetworks.ci: ${CI:-false}\n  org.supernetworks.version: ${RELEASE_VERSION:-latest}${RELEASE_CHANNEL:-}\n\nservices:\n  nexmon:\n    container_name: supernexmon\n    build:\n      context: .\n      labels: *default-labels\n    logging: *default-logging\n    restart: always\n    network_mode: host\n    privileged: true\n    volumes:\n      - /etc/timezone:/etc/timezone:ro\n      - /etc/localtime:/etc/localtime:ro\n      - /lib/firmware/cypress/:/lib/firmware/cypress/\n      - "${SUPERDIR}./state/plugins/nexmon:/state/plugins/nexmon"\n      - "${SUPERDIR}./state/public/:/state/public/:ro"\n')),(0,r.kt)("h3",{id:"extending-the-spr-api"},"Extending the SPR API"),(0,r.kt)("p",null,"The Nexmon patch breaks the ability to change channels normally. Instead, we can do it\nwith the 'nexutil' binary that nexmon provides."),(0,r.kt)("p",null,"We'll rename ",(0,r.kt)("inlineCode",{parentName:"p"},"sample_plugin.go")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"nexmon_plugin.go")," and define a new function"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func changeChannel(w http.ResponseWriter, r *http.Request) {\n    channel := r.URL.Query().Get("channel")\n\n    // Use regexp.MatchString to check if the input matches the pattern\n    matches, err := regexp.MatchString("^[0-9/]*$", channel)\n    if err != nil || !matches {\n        http.Error(w, "Invalid channel string", 400)\n        return\n    }\n\n    err = exec.Command("/nexmon/nexutil", "-k"+channel).Run()\n    if err != nil {\n        http.Error(w, err.Error(), 400)\n        return\n    }\n}\n//...\nfunc main() {\n//...\n    unix_plugin_router.HandleFunc("/change_channel", changeChannel).Methods("PUT")\n}\n')),(0,r.kt)("h3",{id:"updating-the-startup-script"},"Updating the startup script"),(0,r.kt)("p",null,"When the container runs, we'll have it make sure the seemo firmware and kernel module\nare loaded fresh."),(0,r.kt)("p",null,"startup.sh:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"#!/bin/bash\n\ncd /nexmon\ncp brcmfmac43455-sdio.bin /lib/firmware/cypress/cyfmac43455-sdio-standard.bin\n\nrmmod brcmfmac_wcc\nrmmod brcmfmac\n\ninsmod brcmfmac.ko\n\nsleep 1\n\niw phy `iw dev wlan0 info | awk '/wiphy/ {printf \"phy\" $2}'` interface add mon0 type monitor\n\necho [+] Loaded\n\ncd /\n/nexmon_plugin\n")),(0,r.kt)("h2",{id:"loading"},"Loading"),(0,r.kt)("p",null,"After building, with ",(0,r.kt)("inlineCode",{parentName:"p"},"docker compose build"),", we'll configure the API to load the plugin."),(0,r.kt)("p",null,"In the UI or by modifying ",(0,r.kt)("inlineCode",{parentName:"p"},"configs/base/api.json"),", add the nexmon plugin*"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n "Name": "nexmon",\n "URI": "nexmon",\n "UnixPath": "/state/plugins/nexmon/socket",\n "Enabled": true,\n "Plus": false,\n "GitURL": "",\n "ComposeFilePath": ""\n}\n')),(0,r.kt)("p",null,"Start the plugin with"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"SUPERDIR=/home/spr/super/ docker compose up -d\n")),(0,r.kt)("h2",{id:"testing"},"Testing"),(0,r.kt)("p",null,"Running tcpdump should show captured 802.11 packets from the environment"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell-session"},"# tcpdump -i wlan0 ...\n\ntcpdump: verbose output suppressed, use -v[v]... for full protocol decode\nlistening on wlan0, link-type IEEE802_11_RADIO (802.11 plus radiotap header), snapshot length 262144 bytes\n22:50:27.005540 1876482302us tsft 1.0 Mb/s 2412 MHz 11b -68dBm signal 0dBm noise Beacon (wifi-2.4) [1.0* 2.0* 5.5* 11.0* 6.0 9.0 12.0 18.0 Mbit] ESS CH: 1, PRIVACY\n22:50:27.046106 1876522917us tsft 1.0 Mb/s 2412 MHz 11b -46dBm signal 0dBm noise Beacon (wifi-2.4) [1.0* 2.0* 5.5* 11.0* 6.0 9.0 12.0 18.0 Mbit] ESS CH: 1, PRIVACY\n22:50:27.107930 1876584711us tsft 1.0 Mb/s 2412 MHz 11b -70dBm signal 0dBm noise Beacon (wifi-2.4) [1.0* 2.0* 5.5* 11.0* 6.0 9.0 12.0 18.0 Mbit] ESS CH: 1, PRIVACY\n22:50:27.148500 1876625317us tsft 1.0 Mb/s 2412 MHz 11b -46dBm signal 0dBm noise Beacon (wifi-2.4) [1.0* 2.0* 5.5* 11.0* 6.0 9.0 12.0 18.0 Mbit] ESS CH: 1, PRIVACY\n22:50:27.210323 1876687100us tsft 1.0 Mb/s 2412 MHz 11b -67dBm signal 0dBm noise Beacon (wifi-2.4) [1.0* 2.0* 5.5* 11.0* 6.0 9.0 12.0 18.0 Mbit] ESS CH: 1, PRIVACY\n")),(0,r.kt)("p",null,"We can also verify that our channel switch api extension works"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell-session"},"# curl -u admin:admin localhost/plugins/nexmon/change_channel?channel=4/20 -X PUT\n# iw dev\n\nphy#10\n        Interface wlan0\n                ifindex 44\n                wdev 0xa00000002\n                addr 00:00:00:00:00:00\n                type monitor\n                channel 4 (2427 MHz), width: 20 MHz, center1: 2427 MHz\n        Interface mon0\n                ifindex 43\n                wdev 0xa00000001\n                addr e4:5f:01:fd:a1:76\n                type managed\n                channel 4 (2427 MHz), width: 20 MHz, center1: 2427 MHz\n                txpower 31.00 dBm\n...\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"*"," Note that the SPR UI does not allow specifying a docker compose path directly from the UI.\nInstead, a user can modify or create a list in ",(0,r.kt)("inlineCode",{parentName:"em"},"configs/base/custom_compose_paths.json")," to do so.")),(0,r.kt)("h2",{id:"running-barely-ap"},"Running barely-ap"),(0,r.kt)("p",null,"Besides sniffing traffic, we can also do wild things with packet injection, like running a WPA2\nAccess Point written in scapy"),(0,r.kt)("p",null,"Since the nexmon patch is a bit hacky, we set the wlan0 mac address ourselves and make sure the channel matches"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'ap = AP("turtlenet", "password1234", mode="iface", iface="wlan0", mac="e4:5f:01:cd:a1:76", channel=4)\n')),(0,r.kt)("p",null,"\u201cET VOIL\xc0!\u201d:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell-session"},"root@wifilab0:~/barely-ap/src# python3 ap.py                                                                                                                  \ncommand failed: Device or resource busy (-16)\nCreated TUN interface scapyap at 10.10.10.1. Bind it to your services if needed.\nSending Authentication to 56:66:a3:9c:71:8b from e4:5f:01:cd:a1:76 (0x0B)...\nSending Association Response (0x01)...\nsent eapol m1 56:66:a3:9c:71:8b\n[+] New associated station 56:66:a3:9c:71:8b for bssid e4:5f:01:cd:a1:76\n")),(0,r.kt)("h2",{id:"want-to-try-it-yourself-on-spr"},"Want to try it yourself on SPR?"),(0,r.kt)("p",null,"You can grab ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/spr-networks/spr-nexmon/tree/main"},"spr-nexmon here "),"\nand barely-ap at ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/spr-networks/barely-ap"},"https://github.com/spr-networks/barely-ap"),"."))}u.isMDXComponent=!0}}]);