"use strict";(self.webpackChunkspr_docs=self.webpackChunkspr_docs||[]).push([[1792],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>g});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},m=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=l(r),d=a,g=c["".concat(p,".").concat(d)]||c[d]||u[d]||o;return r?n.createElement(g,i(i({ref:t},m),{},{components:r})):n.createElement(g,i({ref:t},m))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[c]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},71441:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var n=r(87462),a=(r(67294),r(3905));const o={slug:"spr-mitmproxy",title:"Transparent Socket Forwarding with SPR and MITMProxy",authors:"ltsrad",tags:["mitmproxy","microsegmentation","transparent sockets","PLUS"]},i=void 0,s={permalink:"/pages/blog/spr-mitmproxy",source:"@site/blog/2023-11-14-mitmproxy.md",title:"Transparent Socket Forwarding with SPR and MITMProxy",description:"Overview",date:"2023-11-14T00:00:00.000Z",formattedDate:"November 14, 2023",tags:[{label:"mitmproxy",permalink:"/pages/blog/tags/mitmproxy"},{label:"microsegmentation",permalink:"/pages/blog/tags/microsegmentation"},{label:"transparent sockets",permalink:"/pages/blog/tags/transparent-sockets"},{label:"PLUS",permalink:"/pages/blog/tags/plus"}],readingTime:1.43,hasTruncateMarker:!1,authors:[{name:"Alex Radocea",url:"https://twitter.com/defendtheworld",key:"ltsrad"}],frontMatter:{slug:"spr-mitmproxy",title:"Transparent Socket Forwarding with SPR and MITMProxy",authors:"ltsrad",tags:["mitmproxy","microsegmentation","transparent sockets","PLUS"]},nextItem:{title:"Loading up nexmon on a RPI4 with SPR",permalink:"/pages/blog/spr-nexmon"}},p={authorsImageUrls:[void 0]},l=[{value:"Overview",id:"overview",level:2},{value:"Prepare the plugin",id:"prepare-the-plugin",level:3},{value:"Configure SPR",id:"configure-spr",level:3},{value:"Using mitmproxy",id:"using-mitmproxy",level:3},{value:"Leveraging Transparent Sockets",id:"leveraging-transparent-sockets",level:2}],m={toc:l};function c(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"In this post we'll show how PLUS members can add a ",(0,a.kt)("inlineCode",{parentName:"p"},"mitmproxy")," plugin to their SPR setup,\nand then use the ",(0,a.kt)("a",{parentName:"p",href:"https://www.supernetworks.org/plus.html"},"Programmable Firewall (PFW)")," plugin to redirect traffic through ",(0,a.kt)("inlineCode",{parentName:"p"},"mitmproxy")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/spr-networks/spr-mitmproxy"},"This plugin is available on github.")),(0,a.kt)("h3",{id:"prepare-the-plugin"},"Prepare the plugin"),(0,a.kt)("p",null,"from the SPR directory, typically ",(0,a.kt)("inlineCode",{parentName:"p"},"/home/spr/super")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'cd plugins\ngit clone https://github.com/spr-networks/spr-mitmproxy\necho [\\"plugins/spr-mitmproxy/docker-compose.yml\\"] > ../configs/base/custom_compose_paths.json\ncd spr-mitmproxy\ndocker-compose build\n')),(0,a.kt)("h3",{id:"configure-spr"},"Configure SPR"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Navigate to the SPR UI. Add mitmproxy under the Plugins page")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"be sure its been added to ",(0,a.kt)("inlineCode",{parentName:"li"},"configs/base/custom_compose_paths.json")," as above"),(0,a.kt)("li",{parentName:"ul"},"Enable it by toggling the slider\n",(0,a.kt)("img",{parentName:"li",src:"https://github.com/spr-networks/spr-mitmproxy/assets/37549748/dcc0f1ea-724a-4ed0-856a-56444ea2569f",alt:null}))),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Add ",(0,a.kt)("inlineCode",{parentName:"li"},"mitmweb0")," to the custom interface rules. You can verify your container's network address in the Container tab ->\nUnder ",(0,a.kt)("inlineCode",{parentName:"li"},"Firewall-> Custom Interface Access")," Add a new rule, make sure mitmproxy has ",(0,a.kt)("inlineCode",{parentName:"li"},"wan")," at least to access the internet.")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://github.com/spr-networks/spr-mitmproxy/assets/37549748/71d4c8c9-3812-452f-86df-a7d19fb703a6",alt:null})),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Create a forwarding rule to the container web interface :8081. Pick an arbitrary IP in the subnet -- although not the same one as the container as that confuses dnat.\n",(0,a.kt)("img",{parentName:"p",src:"https://github.com/spr-networks/spr-mitmproxy/assets/37549748/ff1424c6-b6ad-48d4-8ffe-03186f61abc6",alt:null}))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Create a site forward rule with PFW for traffic to intercept\n",(0,a.kt)("img",{parentName:"p",src:"https://github.com/spr-networks/spr-mitmproxy/assets/37549748/4d5e49b4-5860-4aad-ac17-510589ee31c5",alt:null})))),(0,a.kt)("h3",{id:"using-mitmproxy"},"Using mitmproxy"),(0,a.kt)("p",null,"Then make a curl request from any of the LAN devices, and it should populate on the mitmweb host. This was the :8081 host that was earlier defined\n",(0,a.kt)("img",{parentName:"p",src:"https://github.com/spr-networks/spr-mitmproxy/assets/37549748/a70a9f7e-91b9-4798-926b-2cb625f71e78",alt:null})),(0,a.kt)("h2",{id:"leveraging-transparent-sockets"},"Leveraging Transparent Sockets"),(0,a.kt)("p",null,"Behind the scenes, ",(0,a.kt)("inlineCode",{parentName:"p"},"mitmproxy")," is using transparent sockets with DNAT. Inside the container network,\nwe establish dnat rules to ",(0,a.kt)("inlineCode",{parentName:"p"},"mitmproxy")," from incoming ports ",(0,a.kt)("inlineCode",{parentName:"p"},"80"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"443"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"#!/bin/bash\n\nnft -f - << EOF\ntable inet nat {\n        chain prerouting {\n                type nat hook prerouting priority filter; policy accept;\n                tcp dport { 80, 443 } dnat ip to 127.0.0.1:9999\n        }\n}\nEOF\n\nmitmweb -p 9999 -m transparent --web-host 0.0.0.0\n")))}c.isMDXComponent=!0}}]);