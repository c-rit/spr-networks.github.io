"use strict";(self.webpackChunkspr_docs=self.webpackChunkspr_docs||[]).push([[343],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),m=o,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||s;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var u=2;u<s;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5296:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return c},default:function(){return p}});var r=n(7462),o=n(3366),s=(n(7294),n(3905)),a=["components"],i={sidebar_label:"Raspberry Pi 4 Model B Setup Guide"},l="Raspberry Pi 4 Model B Setup Guide",u={unversionedId:"pi4b",id:"pi4b",title:"Raspberry Pi 4 Model B Setup Guide",description:"Configuration",source:"@site/docs/pi4b.md",sourceDirName:".",slug:"/pi4b",permalink:"/pages/docs/pi4b",tags:[],version:"current",frontMatter:{sidebar_label:"Raspberry Pi 4 Model B Setup Guide"},sidebar:"tutorialSidebar",previous:{title:"Wireguard",permalink:"/pages/docs/services/wireguard"},next:{title:"Security Contact Information",permalink:"/pages/docs/security"}},c=[{value:"Configuration",id:"configuration",children:[{value:"Base System Setup",id:"base-system-setup",children:[],level:3},{value:"Configuring the project",id:"configuring-the-project",children:[],level:3},{value:"Building the project",id:"building-the-project",children:[],level:3}],level:2},{value:"Running:",id:"running",children:[{value:"Additional Notes",id:"additional-notes",children:[],level:3},{value:"Using a different wireless dongle",id:"using-a-different-wireless-dongle",children:[],level:3}],level:2}],d={toc:c};function p(e){var t=e.components,n=(0,o.Z)(e,a);return(0,s.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"raspberry-pi-4-model-b-setup-guide"},"Raspberry Pi 4 Model B Setup Guide"),(0,s.kt)("h2",{id:"configuration"},"Configuration"),(0,s.kt)("p",null,"The current setup assumes you'll be using a raspberry pi model 4b with a AWUS036ACM wireless dongle (wlan1)\nand an additional usb ethernet dongle (eth1) connected to a switch for additional wired devices.\nThe built-in ethernet port of the raspberry pi (eth0) is connected to upstream/WAN/internet"),(0,s.kt)("p",null,"Hardware requirements:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"At least an 8GB SD card is required, probably 16GB is better and 128gb for development work is best."),(0,s.kt)("li",{parentName:"ul"},"A WiFi Dongle for better performance and WPA3 support (",(0,s.kt)("a",{parentName:"li",href:"https://www.alfa.com.tw/products/awus036acm"},"https://www.alfa.com.tw/products/awus036acm")," and ",(0,s.kt)("a",{parentName:"li",href:"https://www.netgear.com/home/wifi/adapters/a6210/"},"https://www.netgear.com/home/wifi/adapters/a6210/")," have been tested to be good and both use the mt76x2u driver)"),(0,s.kt)("li",{parentName:"ul"},"A USB WiFi Dongle for additional LAN devices since the built-in port (eth1) will be used for the WAN. ",(0,s.kt)("a",{parentName:"li",href:"https://www.tp-link.com/us/home-networking/usb-converter/ue300/"},"https://www.tp-link.com/us/home-networking/usb-converter/ue300/")," Is good")),(0,s.kt)("h3",{id:"base-system-setup"},"Base System Setup"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Set up the pi with ubuntu server 64-bit ",(0,s.kt)("a",{parentName:"li",href:"https://ubuntu.com/download/raspberry-pi/thank-you?version=21.04&architecture=server-arm64+raspi"},"https://ubuntu.com/download/raspberry-pi/thank-you?version=21.04&architecture=server-arm64+raspi"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"# Example from mac\n$ xzcat ubuntu-21.04-preinstalled-server-arm64+raspi.img.xz | dd of=/dev/rdisk2 bs=$[1024*1024]\n")),(0,s.kt)("p",null,"1.a. Tune the ubuntu config (see base/setup.sh)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"# On the booted pi (see and run base/setup.sh)\ngit clone https://github.com/spr-networks/super\ncd super\nbase/setup.sh\nreboot\n")),(0,s.kt)("p",null,"Contents of base/setup.sh:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'apt-get update\napt-get -y upgrade\napt-get -y install docker.io docker-compose\n\ntouch /etc/cloud/cloud-init.disabled\n\n# get rid of `predictable` interface names to get eth0, eth1, wlan0, wlan1 instead.\nmv /lib/udev/rules.d/80-net-setup-link.rules /lib/udev/rules.d/80-net-setup-link.rules.bak\nln -s /dev/null  /lib/udev/rules.d/80-net-setup-link.rules\n\n# Add a bug fix for scatter/gather bugs with USB:\necho "options mt76_usb disable_usb_sg=1" > /etc/modprobe.d/mt76_usb.conf\n\n# do not use systemd-resolvd, we will use our own container later\nsystemctl disable systemd-resolved\nsystemctl stop systemd-resolved\nrm /etc/resolv.conf\necho "nameserver 1.1.1.1" > /etc/resolv.conf\n\n# constrain journal size\necho -e "[Journal]\\n\\nSystemMaxUse=50m\\nSystemMaxFileSize=10M" > /etc/systemd/journald.conf\n# mount logs as tmpfs\necho -e "tmpfs\\t/tmp\\ttmpfs\\tdefaults,noatime,nosuid,size=100m\\t0\\t0\\ntmpfs\\t/var/tmp\\ttmpfs\\tdefaults,noatime,nosuid,size=100m\\t0\\t0\\ntmpfs\\t/var/log\\ttmpfs\\tdefaults,noatime,nosuid,mode=0755,size=100m\\t0\\t0\\ntmpfs\\t/run\\ttmpfs\\tdefaults,noatime,nosuid,mode=0755,size=10m\\t0\\t0\\ntmpfs\\t/var/run\\ttmpfs\\tdefaults,noatime,nosuid,mode=0755,size=10m\\t0\\t0\\n" >> /etc/fstab\n\n# disable dhclient on the WANIF, since we will run our own dhcp\necho network: {config: disabled} > /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg\n\n# disable iptables for  docker\necho -e "{\\n  \\"iptables\\": false\\n}" > /etc/docker/daemon.json\n')),(0,s.kt)("h3",{id:"configuring-the-project"},"Configuring the project"),(0,s.kt)("p",null,"Inside the super directory, copy base/template_configs to configs/"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"cd super\ncp -R base/template_configs configs\n")),(0,s.kt)("p",null,"Then modify configs/base/config.sh to set an SSID_NAME and configure the various options.  "),(0,s.kt)("p",null,'Next, set some station passwords. For WPA3, use "sae" type and for WPA2 use "wpa2".\nModify configs/wifi/psks.json to set MAC and passwords.'),(0,s.kt)("p",null,"Lastly, modify configs/zones/zones.json\nThe default zones are:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"# No access to anything\n- isolated\n# Allows DNS query access\n- dns\n# Allows internet/WAN forwarding\n- wan\n# Allows full LAN access\n- lan\n")),(0,s.kt)("p",null,"You can also add custom groups of devices that can mutually communicate."),(0,s.kt)("h3",{id:"building-the-project"},"Building the project"),(0,s.kt)("p",null,"All source code can be built on the pi with"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"./build_docker_compose.sh\n")),(0,s.kt)("p",null,"Optionally, use our own coredns build for DNS for the router. The container will need to be running"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"echo nameserver 127.0.0.1 > /etc/resolv.conf\n\n")),(0,s.kt)("h2",{id:"running"},"Running:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"./run_docker_compose.sh\n")),(0,s.kt)("h3",{id:"additional-notes"},"Additional Notes"),(0,s.kt)("p",null,"Check dns-Corefile to tweak DNS server configuration as well as the hostapd settings in configs/gen_hostapd.sh"),(0,s.kt)("h3",{id:"using-a-different-wireless-dongle"},"Using a different wireless dongle"),(0,s.kt)("p",null,"For using the built-in wireless or a different dongle, the hostapd configuration may need to be modified in configs/gen_hostapd.sh.\nNote that if the built-in wireless is to be used, WPA3 is not currently available without additional broadcom firmware patches. The next raspberry pi os releases should include these by default."))}p.isMDXComponent=!0}}]);